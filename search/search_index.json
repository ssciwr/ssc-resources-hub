{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Material for MkDocs","text":"<p>Welcome to Material for MkDocs.</p>"},{"location":"about/","title":"About","text":"<p>This project was created by Edwin C..</p>"},{"location":"community/","title":"Join Us","text":"<p>Welcome to the ssc-resource-hub community! We follow open-source principles and encourage any sort of contribution. We communicate on GitHub, where we also organise our projects.</p> <ul> <li> <p> Where to Start</p> <p>If you'd like to learn how to contribute to our projects, please follow the steps outlined in the contribution guide.</p> <p> To the contribution guide</p> </li> </ul>"},{"location":"community/#contributing-guidelines-github-links","title":"Contributing Guidelines GitHub Links","text":"<ul> <li> <p>Contribution guidelines</p> </li> <li> <p>Code of Conduct</p> </li> <li> <p>Developer Guide</p> </li> </ul>"},{"location":"community/contribute-codebase/","title":"Developer Guide","text":"<p>Thank you for considering to contribute to the project! This guide will help you to get started with the development of the project. If you have any questions, please feel free to ask them in the issue tracker on GitHub.</p>"},{"location":"community/contribute-codebase/#small-contributions","title":"Small Contributions","text":"<p>If you want to contribute a small change (e.g., a bugfix), you can probably immediately go ahead and create a pull request. For more substantial changes or additions, please read on.</p>"},{"location":"community/contribute-codebase/#larger-contributions","title":"Larger Contributions","text":"<p>If you want to contribute a larger change, please create an issue first. This will allow us to discuss the change and make sure that it fits into the project.  It can happen that development for a feature is already in progress, so it is important to check first to avoid duplicate work. If you have any questions, feel free to approach us in any way you like.</p>"},{"location":"community/contribute-codebase/#dependency-management","title":"Dependency management","text":"<p>We use Poetry for dependency management. Please make sure that you have installed Poetry and set up the environment correctly before starting development.</p>"},{"location":"community/contribute-codebase/#setting-up-the-environment","title":"Setting up the environment","text":"<ul> <li> <p>Install dependencies from the lock file: <code>poetry install</code></p> </li> <li> <p>Use the environment: You can either run commands directly with <code>poetry run &lt;command&gt;</code> or open a shell with <code>poetry shell</code> and then run commands directly.</p> </li> </ul>"},{"location":"community/contribute-codebase/#updating-the-environment","title":"Updating the environment","text":"<p>If you want to fix dependency issues, please do so in the Poetry framework. If Poetry does not work for you for some reason, please let us know.</p> <p>The Poetry dependencies are organized in groups. There are groups with dependencies needed for running ssc-resource-hub (<code>[tool.poetry.dependencies]</code> with the group name <code>main</code>) and a group with dependencies needed for development (<code>[tool.poetry.group.dev.dependencies]</code> with the group name <code>dev</code>).</p> <p>For adding new dependencies:</p> <ul> <li> <p>Add new dependencies via <code>poetry add</code>: <code>poetry add &lt;dependency&gt; --group &lt;group&gt;</code>. This will update the <code>pyproject.toml</code> and lock file automatically.</p> </li> <li> <p>Add new dependencies via <code>pyproject.toml</code>: Add the dependency to the <code>pyproject.toml</code> file in the correct group, including version. Then update the lock file: <code>poetry lock</code> and install the dependencies: <code>poetry install</code>.</p> </li> </ul>"},{"location":"community/contribute-codebase/#code-quality-and-formal-requirements","title":"Code quality and formal requirements","text":"<p>For ensuring code quality, the following tools are used:</p> <ul> <li> <p>isort for sorting imports</p> </li> <li> <p>black for automated code formatting</p> </li> <li> <p>pre-commit-hooks for ensuring some general rules</p> </li> <li> <p>pep585-upgrade for automatically upgrading type hints to the new native types defined in PEP 585</p> </li> <li> <p>pygrep-hooks for ensuring some general naming rules</p> </li> <li> <p>Ruff An extremely fast Python linter and code formatter, written in Rust</p> </li> </ul> <p>We recommend configuring your IDE to execute Ruff on save/type, which will automatically keep your code clean and fix some linting errors as you type. This is made possible by the fast execution of Ruff and removes the need to run a dedicated pre-commit step. For instance, in VSCode or Cursor, you can add this to your <code>.vscode/settings.json</code>:</p> <pre><code>{\n    \"editor.formatOnType\": true,\n    \"editor.formatOnSave\": true,\n    \"editor.codeActionsOnSave\": {\n        \"source.fixAll.ruff\": \"explicit\",\n        \"source.organizeImports.ruff\": \"explicit\"\n    },\n    \"editor.defaultFormatter\": \"charliermarsh.ruff\"\n}\n</code></pre> <p>Alternatively, pre-commit hooks can be used to automatically or manually run these tools before each commit. They are defined in <code>.pre-commit-config.yaml</code>. To install the hooks run <code>poetry run pre-commit install</code>. The hooks are then executed before each commit. For running the hook for all project files (not only the changed ones) run <code>poetry run pre-commit run --all-files</code>. Our CI runs the pre-commit hooks, so running them locally is a good way to check if your code conforms to the formatting rules.</p>"},{"location":"community/contribute-codebase/#testing","title":"Testing","text":"<p>The project uses pytest for testing. To run the tests, please run <code>pytest</code> in the root directory of the project. We are developing ssc-resource-hub using test-driven development. Please make sure that you add tests for your code before submitting a pull request.</p> <p>The existing tests can also help you to understand how the code works. If you have any questions, please feel free to ask them in the issue tracker or on Zulip.</p> <p>Before submitting a pull request, please make sure that all tests pass and that the documentation builds correctly.</p>"},{"location":"community/contribute-codebase/#versioning","title":"Versioning","text":"<p>We use semantic versioning for the project. This means that the version number is incremented according to the following scheme:</p> <ul> <li> <p>Increment the major version number if you make incompatible API changes.</p> </li> <li> <p>Increment the minor version number if you add functionality in a backwards-   compatible manner. Since we are still in the 0.x.y version range, most of the   significant changes will increase the minor version number.</p> </li> <li> <p>Increment the patch version number if you make backwards-compatible bug fixes.</p> </li> </ul> <p>We use the <code>bumpversion</code> tool to update the version number in the <code>pyproject.toml</code> file. This will create a new git tag automatically. Usually, versioning is done by the maintainers, so please do not increment versions in pull requests by default.</p>"},{"location":"community/contribute-codebase/#finding-an-issue-to-contribute-to","title":"Finding an issue to contribute to","text":"<p>If you are brand new to ssc-resource-hub or open-source development, we recommend searching the GitHub \"Issues\" tab to find issues that interest you. Unassigned issues labeled <code>Docs</code> and <code>good first</code> are typically good for newer contributors.</p> <p>Once you've found an interesting issue, it's a good idea to assign the issue to yourself, so nobody else duplicates the work on it.</p> <p>If for whatever reason you are not able to continue working with the issue, please unassign it, so other people know it's available again. If you want to work on an issue that is currently assigned but you're unsure whether work is actually being done, feel free to kindly ask the current assignee if you can take over (please allow at least a week of inactivity before getting in touch).</p>"},{"location":"community/contribute-codebase/#submitting-a-pull-request","title":"Submitting a Pull Request","text":""},{"location":"community/contribute-codebase/#tips-for-a-successful-pull-request","title":"Tips for a successful pull request","text":"<p>To improve the chances of your pull request being reviewed, you should:</p> <ul> <li>Reference an open issue for non-trivial changes to clarify the PR's purpose.</li> <li>Ensure you have appropriate tests. Tests should be the focus of any PR (apart from documentation changes).</li> <li>Keep your pull requests as simple as possible. Larger PRs take longer to review.</li> <li>Ensure that CI is in a green state. Reviewers may tell you to fix the CI before looking at anything else.</li> </ul>"},{"location":"community/contribute-codebase/#version-control-git-and-github","title":"Version control, Git, and GitHub","text":"<p>ssc-resource-hub is hosted on GitHub, and to contribute, you will need to sign up for a free GitHub account. We use Git for version control to allow many people to work together on the project.</p> <p>If you are new to Git, you can reference some of these resources for learning Git. Feel free to reach out to the contributor community for help if needed:</p> <ul> <li>Git documentation.</li> </ul> <p>The project follows a forking workflow further described on this page whereby contributors fork the repository, make changes and then create a Pull Request. So please be sure to read and follow all the instructions in this guide.</p> <p>If you are new to contributing to projects through forking on GitHub, take a look at the GitHub documentation for contributing to projects. GitHub provides a quick tutorial using a test repository that may help you become more familiar with forking a repository, cloning a fork, creating a feature branch, pushing changes and making Pull Requests.</p> <p>Below are some useful resources for learning more about forking and Pull Requests on GitHub:</p> <ul> <li> <p>the GitHub documentation for forking a repo.</p> </li> <li> <p>the GitHub documentation for collaborating with Pull Requests.</p> </li> <li> <p>the GitHub documentation for working with forks.</p> </li> </ul> <p>There are also many unwritten rules and conventions that are helpful in interacting with other open-source contributors. These lessons from PyOpenSci are a good resource for learning more about how to interact with other open-source contributors in scientific computing.</p>"},{"location":"community/contribute-codebase/#getting-started-with-git","title":"Getting started with Git","text":"<p>GitHub has instructions for installing git, setting up your SSH key, and configuring git. All these steps need to be completed before you can work seamlessly between your local repository and GitHub.</p>"},{"location":"community/contribute-codebase/#create-a-fork-of-ssc-resource-hub","title":"Create a fork of ssc-resource-hub","text":"<p>You will need your own fork of ssc-resource-hubin order to eventually open a Pull Request. Go to the ssc-resource-hub project page and hit the Fork button. Please uncheck the box to copy only the main branch before selecting Create Fork. You will then want to clone your fork to your machine.</p> <pre><code>git clone https://github.com/your-user-name/ssc-resource-hub.git\ncd ssc-resource-hub\ngit remote add upstream https://github.com/ssc-resource-hub/ssc-resource-hub.git\ngit fetch upstream\n</code></pre> <p>This creates the directory <code>ssc-resource-hub</code> and connects your repository to the upstream (main project) ssc-resource-hub repository. They have the same name, but your local repository and fork are separate from the upstream repository.</p>"},{"location":"community/contribute-codebase/#creating-a-feature-branch","title":"Creating a feature branch","text":"<p>Your local <code>main</code> branch should always reflect the current state of ssc-resource-hub repository. First ensure it's up-to-date with the main ssc-resource-hub repository.</p> <pre><code>git checkout main\ngit pull upstream main --ff-only\n</code></pre> <p>Then, create a feature branch for making your changes. For example, we are going to create a branch called <code>my-new-feature-for-ssc-resource-hub</code></p> <pre><code>git checkout -b my-new-feature-for-ssc-resource-hub\n</code></pre> <p>This changes your working branch from <code>main</code> to the <code>my-new-feature-for-ssc-resource-hub</code> branch. Keep any changes in this branch specific to one bug or feature so it is clear what the branch brings to ssc-resource-hub. You can have many feature branches and switch between them using the <code>git checkout</code> command.</p>"},{"location":"community/contribute-codebase/#making-code-changes","title":"Making code changes","text":"<p>Before modifying any code, ensure you follow the contributing environment guidelines to set up an appropriate development environment.</p> <p>When making changes, follow these ssc-resource-hub-specific guidelines:</p> <ol> <li> <p>Keep changes of that branch/PR focused on a single feature or bug fix.</p> </li> <li> <p>Follow roughly the conventional commit message conventions.</p> </li> </ol>"},{"location":"community/contribute-codebase/#pushing-your-changes","title":"Pushing your changes","text":"<p>When you want your committed changes to appear publicly on your GitHub page, you can push your forked feature branch's commits to your forked repository on GitHub.</p> <p>Now your code is on GitHub, but it is not yet a part of the ssc-resource-hub project. For that to happen, a Pull Request (PR) needs to be submitted.</p>"},{"location":"community/contribute-codebase/#opening-a-pull-request-pr","title":"Opening a Pull Request (PR)","text":"<p>If everything looks good according to the general guidelines, you are ready to make a Pull Request. A Pull Request is how code from your fork becomes available to the project maintainers to review and merge into the project to appear in the next release. To submit a Pull Request:</p> <ol> <li> <p>Navigate to your repository on GitHub.</p> </li> <li> <p>Click on the Compare &amp; Pull Request button.</p> </li> <li> <p>You can then click on Commits and Files Changed to make sure everything looks okay one last time.</p> </li> <li> <p>Write a descriptive title that includes prefixes. ssc-resource-hub uses a convention for title prefixes, most commonly, <code>feat:</code> for features, <code>fix:</code> for bug fixes, and <code>refactor:</code> for refactoring.</p> </li> <li> <p>Write a description of your changes in the <code>Preview Discussion</code> tab. This description will inform the reviewers about the changes you made, so please include all relevant information, including the motivation, implementation details, and references to any issues that you are addressing.</p> </li> <li> <p>Make sure to <code>Allow edits from maintainers</code>; this allows the maintainers to make changes to your PR directly, which is useful if you are not sure how to fix the PR.</p> </li> <li> <p>Click <code>Send Pull Request</code>.</p> </li> <li> <p>Optionally, you can assign reviewers to your PR, if you know who should review it.</p> </li> </ol> <p>This request then goes to the repository maintainers, and they will review the code.</p>"},{"location":"community/contribute-codebase/#updating-your-pull-request","title":"Updating your Pull Request","text":"<p>Based on the review you get on your pull request, you will probably need to make some changes to the code. You can follow the steps above again to address any feedback and update your pull request.</p>"},{"location":"community/contribute-codebase/#parallel-changes-in-the-upstream-main-branch","title":"Parallel changes in the upstream <code>main</code> branch","text":"<p>In case of simultaneous changes to the upstream code, it is important that these changes are reflected in your pull request. To update your feature branch with changes in the ssc-resource-hub <code>main</code> branch, run:</p> <pre><code>    git checkout my-new-feature-for-ssc-resource-hub\n    git fetch upstream\n    git merge upstream/main\n</code></pre> <p>If there are no conflicts (or they could be fixed automatically), a file with a default commit message will open, and you can simply save and quit this file.</p> <p>If there are merge conflicts, you need to resolve those conflicts. See here for an explanation on how to do this.</p> <p>Once the conflicts are resolved, run:</p> <ol> <li><code>git add -u</code> to stage any files you've updated;</li> <li><code>git commit</code> to finish the merge.</li> </ol> <p>After the feature branch has been updated locally, you can now update your pull request by pushing to the branch on GitHub:</p> <pre><code>    git push origin my-new-feature-for-ssc-resource-hub\n</code></pre> <p>Any <code>git push</code> will automatically update your pull request with your branch's changes and restart the <code>Continuous Integration</code> checks.</p>"},{"location":"community/contribute-docs/","title":"Contributing to the documentation","text":"<p>Contributing to the documentation benefits everyone who uses ssc-resource-hub. We encourage you to help us improve the documentation, and you don't have to be an expert on ssc-resource-hub to do so! In fact, there are sections of the docs that are worse off after being written by experts. If something in the docs doesn't make sense to you, updating the relevant section after you figure it out is a great way to ensure it will help the next person.</p>"},{"location":"community/contribute-docs/#how-to-contribute-to-the-documentation","title":"How to contribute to the documentation","text":"<p>The documentation is written in Markdown, which is almost like writing in plain English, and built using Material for MkDocs. The simplest way to contribute to the docs is to click on the <code>Edit</code> button (pen and paper) at the top right of any page. This will take you to the source file on GitHub, where you can make your changes and create a pull request using GitHub's web interface (the <code>Commit changes...</code> button).</p> <p>Some other important things to know about the docs:</p> <ul> <li> <p>The ssc-resource-hub documentation consists of two parts: the docstrings in the code   itself and the docs in the <code>docs/</code> folder. The docstrings provide a clear   explanation of the usage of the individual functions, while the documentation   website you are looking at is built from the <code>docs/</code> folder.</p> </li> <li> <p>The docstrings follow a convention, based on the Google Docstring   Standard.</p> </li> <li> <p>Our API documentation files in <code>docs/reference/source</code> contain the   instructions for the auto-generated documentation from the docstrings. For   classes, there are a few subtleties around controlling which methods and   attributes have pages auto-generated.</p> </li> </ul>"},{"location":"community/contribute/","title":"How to Start Contributing","text":"<p>There are many valuable ways to contribute besides writing code. Thank you for dedicating your time to improve our project!</p>"},{"location":"community/contribute/#bug-reports-and-enhancement-requests","title":"Bug reports and enhancement requests","text":"<p>Bug reports and enhancement requests are an important part of making any software more stable. We curate them though Github issues. When opening an issue or request, please select the appropriate category and fill out the issue form fully to ensure others and the core development team can fully understand the scope of the issue. If your category is not listed, you can create a blank issue.</p> <p>The issue will then show up to the ssc-resource-hub community and be open to comments/ideas from others.</p>"},{"location":"community/contribute/#categories","title":"Categories","text":"<ul> <li>Bug Report: Report incorrect behavior in the ssc-resource-hub library</li> <li>Register New Component: Register a new component in the ssc-resource-hub ecosystem, either one you have created, or one that you would like to see added</li> <li>Documentation Improvement: Report wrong or missing documentation</li> <li>Feature Request: Suggest an idea for ssc-resource-hub</li> </ul>"},{"location":"community/contribute/#detailed-guides","title":"Detailed Guides","text":"<ul> <li> <p> Contributing to the Documentation</p> <p>A simple way to get started is to contribute to the documentation. Please follow the guide here to learn how to do so.</p> <p> To the contribution guide</p> </li> </ul> <ul> <li> <p> Contributing to the Code Base</p> <p>The best way to contribute code is to open a pull request on Github. Please follow the guide here to learn how to do so.</p> <p> To the contribution guide</p> </li> </ul>"},{"location":"learn/explanation/software-engineering-intro/","title":"Software Engineering at a glance","text":""},{"location":"learn/explanation/software-engineering-intro/#software-development-life-cycle-core-phases","title":"Software Development Life Cycle (Core phases)","text":""},{"location":"learn/explanation/software-engineering-intro/#waterfall-methodology","title":"Waterfall Methodology","text":""},{"location":"learn/explanation/software-engineering-intro/#scrum-methodology","title":"Scrum Methodology","text":""},{"location":"learn/explanation/software-engineering-intro/#conclusion","title":"Conclusion","text":""},{"location":"learn/explanation/software-engineering-intro/#references","title":"References","text":""},{"location":"learn/on-demand-courses/","title":"List of available courses","text":""},{"location":"learn/on-demand-courses/#artificial-intelligence","title":"Artificial Intelligence","text":"<ul> <li>AI in research software: Best practices for developing and using ML models</li> <li>Generative AI for writing (research) software</li> </ul>"},{"location":"learn/on-demand-courses/#cc-programming","title":"C/C++ Programming","text":"<ul> <li>High Perfomance C++</li> <li>Performance benchmarking C++ applications</li> </ul>"},{"location":"learn/on-demand-courses/#continuos-delivery","title":"Continuos Delivery","text":"<ul> <li>Containers in Science: Using Docker and Singularity</li> </ul>"},{"location":"learn/on-demand-courses/#continuous-integration","title":"Continuous Integration","text":"<ul> <li>Continuous Integration with GitHub Actions</li> <li>[Part I] The Unix Shell + Version Control with Git</li> <li>[Part II] Intermediate Topics in Version Control with Git</li> <li>[Part III] Expert Topics in Version Control with Git</li> </ul>"},{"location":"learn/on-demand-courses/#cross-language-tools","title":"Cross-language Tools","text":"<ul> <li>Building Software with CMake</li> </ul>"},{"location":"learn/on-demand-courses/#python-programming","title":"Python Programming","text":""},{"location":"learn/on-demand-courses/#best-practices","title":"Best practices","text":"<ul> <li>Python best practices</li> </ul>"},{"location":"learn/on-demand-courses/#data-science","title":"Data Science","text":"<ul> <li>Data Exploration with Python and Jupyter</li> </ul>"},{"location":"learn/on-demand-courses/#deployment-and-packaging","title":"Deployment and Packaging","text":"<ul> <li>Python Packaging</li> </ul>"},{"location":"learn/on-demand-courses/#testing","title":"Testing","text":"<ul> <li>Introduction to Python testing</li> <li>Effective Software Testing in Python</li> </ul>"},{"location":"learn/on-demand-courses/#software-engineering","title":"Software Engineering","text":"<ul> <li>A short tour of sustainable software development</li> <li>Open Source Licensing</li> <li>Scientific Software Development</li> </ul>"},{"location":"resources/ssc-templates/cpp-templates/","title":"C++ Templates","text":"<ul> <li> <p> C++ Project Cookicutter</p> <p>A cookiecutter for a C++ Project with lots of configuration options.</p> <p> Go to the repo</p> </li> </ul> <ul> <li> <p> C++ Project Template</p> <p>A simple template for C++ projects: CMake, Unit tests, Continous Integration all set up and ready to go.</p> <p> Go to the repo</p> </li> </ul>"},{"location":"resources/ssc-templates/documentation-templates/","title":"Documentation Templates","text":""},{"location":"resources/ssc-templates/documentation-templates/#ssc-slides-template","title":"SSC Slides Template","text":"<p>Link: Here</p>"},{"location":"resources/ssc-templates/fortran-templates/","title":"Fortran Templates","text":"<ul> <li> <p> Fortran Project Template</p> <p>Basic template to start your Fortran research software development</p> <p> Go to the repo</p> </li> </ul>"},{"location":"resources/ssc-templates/jupyter-templates/","title":"Jupyter Notebooks Templates","text":"<ul> <li> <p> Jupyter Slides Template</p> <p>Jupyter notebook that renders as html slides. </p> <p> Go to the repo</p> </li> </ul>"},{"location":"resources/ssc-templates/matlab-templates/","title":"MATLAB Templates","text":"<ul> <li> <p> MATLAB Project Template</p> <p>Basic template to start your Matlab research software development.</p> <p> Go to the repo</p> </li> </ul> <ul> <li> <p> MATLAB Standalone App</p> <p>CI deployment template for Matlab standalone apps.</p> <p> Go to the repo</p> </li> </ul>"},{"location":"resources/ssc-templates/python-templates/","title":"Python Templates","text":"<ul> <li> <p> Python Package Cookicutter</p> <p>This template repository helps you quickly set up new Python packages for scientific applications, following best practices from Heidelberg University's Scientific Software Center.</p> <p> Go to the repo</p> </li> </ul> <ul> <li> <p> Python Project Template</p> <p>Basic template to start your Python research software development. </p> <p> Go to the repo</p> </li> </ul>"},{"location":"ssc-resource-hub/project/","title":"Scientific Software Center","text":"<p>The main goal of this Hub is to centralize all the Knowledge we want to share with the community in order to improve scientific software development.</p>"},{"location":"twin-repos/cookiecutter-cpp-project/","title":"Welcome to C++ Project Cookiecutter!","text":"<p>This repository is a template repository (a cookiecutter) that allows you to quickly set up new CMake-based C++ projects. If you are new to C++ and CMake, you might want to checkout our simpler C++ template repository.</p>"},{"location":"twin-repos/cookiecutter-cpp-project/#features","title":"Features","text":"<p>The core features of our C++ Cookiecutter in a nutshell:</p> <ul> <li>Very simple, configurable setup of a fully functional C++ project</li> <li>Modern CMake implementation based on targets</li> <li>Choose and add a license and copyright statement to your project</li> <li>Ready-to-use integration with the Github Actions and Gitlab CI</li> <li>Generation and deployment of Sphinx-based documentation for Read the Docs</li> <li>Building a Doxygen documentation</li> <li>Setup of Python bindings with Pybind11</li> <li>CI-based deployment of Python wheels to PyPI</li> <li>Generated pre-commit configuration is added if you have <code>pre-commit</code> installed</li> <li>Integration with coverage testing from codecov.io</li> <li>Based on an established tool: Cookiecutter has &gt;15k stars on Github!</li> </ul>"},{"location":"twin-repos/cookiecutter-cpp-project/#prerequisites","title":"Prerequisites","text":"<p>In order to use this C++ Project Cookiecutter you need the following software installed:</p> <ul> <li>Python <code>&gt;= 3.6</code></li> <li>Cookiecutter <code>&gt;=2.1</code> e.g. by doing <code>pip install cookiecutter</code>.</li> <li>Git <code>&gt;= 1.8.2</code></li> </ul> <p>In addition, the project that is generated from this cookiecutter will require the following software:</p> <ul> <li>A C++ compiler, e.g. <code>g++</code> or <code>clang++</code></li> <li>CMake <code>&gt;= 3.9</code></li> <li>Doxygen (optional, but recommended)</li> </ul>"},{"location":"twin-repos/cookiecutter-cpp-project/#using-c-project-cookiecutter","title":"Using C++ Project Cookiecutter","text":"<p>Simply run the cookiecutter command line interface:</p> <pre><code>cookiecutter gh:ssciwr/cookiecutter-cpp-project\n</code></pre> <p>This will start an interactive prompt that will configure and generate your project. One of the prompts will ask you for a remote repository URL, so you should head to the Git hosting service of your choice and add a new empty repository e.g. on Github.</p>"},{"location":"twin-repos/cookiecutter-cpp-project/#configuration","title":"Configuration","text":"<p>This cookiecutter accepts the following configuration options:</p> <ul> <li><code>project_name</code>: The human-readable name of the project, defaults to <code>My C++ Project</code></li> <li><code>remote_url</code>: The remote URL for the newly created repository. This is not only used   to add it as a remote to the Git repository, but also to enable integration with some   services. Defaults to <code>None</code> although we strongly advise you to specify it.</li> <li><code>project_slug</code>: This will be the name of the generated directory. By default, it is deduced   from the specified remote URL and the given project name.</li> <li><code>full_name</code>: Author name, defaults to <code>Your Name</code></li> <li><code>license</code> adds a license file to the repository. It can be chosen from MIT (default), BSD-2, GPL-3.0, LGPL-3.0 or it can be omitted.</li> <li><code>use_submodules</code>: Whether <code>git submodule</code> should be used to add version-pinned external   dependencies (like e.g. the testing framework <code>Catch2</code>). If you do not know what git submodules   are, you should select <code>No</code>.</li> <li><code>header_only</code>: Whether the C++ project is header-only. If <code>No</code> is selected, a library will   be added to the project. In both cases, a target is exported that dependent projects can   link against.</li> <li><code>external_dependency</code>: The name of an external dependency of your library. Defaults to <code>None</code>.   This will generate the required CMake code for handling of external dependencies. Note that   this support will typically not work straight away, as it highly depends on the dependency.   See the generated TODO list for hints at what to do. If you have multiple external dependencies   add one of them here and then manually add the other ones analoguously.</li> <li><code>github_actions_ci</code>: Whether to add a CI workflow for Github Actions</li> <li><code>gitlab_ci</code>: Whether to add a CI workflow for GitLab CI</li> <li><code>readthedocs</code>: Whether to create a Sphinx-documentation that can automatically be deployed to readthedocs.org</li> <li><code>doxygen</code>: Whether a Doxygen documentation should be extracted from the project</li> <li><code>cxx_minimum_standard</code>: The minimum C++ standard required for this project. It can be chosen from <code>11</code> (default), <code>14</code>, <code>17</code> and <code>20</code>.   <code>C++03</code> and earlier are not supported, because the generated project will depend on libraries that require <code>C++11</code> (Catch2   for testing and pybind11 for potential Python bindings).</li> <li><code>python_bindings</code>: Whether to automatically add a PyBind11-based Python binding package.</li> <li><code>pypi_release</code>: Whether to add an automatic PyPI deploy workflow to the CI system.   This is currently limited to Github Actions CI as it provides cloud-based runners for all relevant   platforms (Linux, MacOS, Windows). A PyPI release is automatically triggered when a release is   generated in the Github UI.</li> <li><code>codecovio</code>: Whether an automatic integration with coverage checking from codecov.io   should be set up. This requires an Open Source license in order to be free to use.</li> </ul> <p>If you are using <code>cookiecutter-cpp-project</code> a lot, you can customize your default values by providing a <code>.cookiecutterrc</code> file in your home directory, for more details see the cookiecutter documentation.</p>"},{"location":"twin-repos/cookiecutter-cpp-project/#issues","title":"Issues","text":"<p>Please report any issues you might have with template using the Github issue tracker</p>"},{"location":"twin-repos/cookiecutter-cpp-project/CHANGELOG/","title":"v1.0 Release (2020-12-17)","text":"<p>Initial release of cookiecutter-cpp-project with the following features:</p> <ul> <li>License Selection</li> <li>Github Actions and Gitlab CI ready to use</li> <li>Sphinx-based documentation ready to deploy to Readthedocs</li> <li>Local building of Doxygen documentation</li> <li>Python bindings with Pybind11</li> <li>CI-based deployment of Python bindings to PyPI</li> <li>Coverage Testing from codecov.io</li> <li>Code Quality Analysis from SonarCloud</li> </ul>"},{"location":"twin-repos/cookiecutter-cpp-project/COPYING/","title":"COPYING","text":"<p>This is the list of copyright holders of meta-cookiecutter. For information on the license, see LICENSE.md.</p> <ul> <li>Dominic Kempf, 2020</li> <li>Liam Keegan, 2020</li> </ul>"},{"location":"twin-repos/cookiecutter-cpp-project/LICENSE/","title":"LICENSE","text":"<p>Copyright 2020, The copyright holders according to COPYING.md</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"twin-repos/cookiecutter-cpp-project/%7B%7Bcookiecutter.project_slug%7D%7D/","title":"Welcome to {{ cookiecutter.project_name }}","text":"<p>{# The white-space control of the below template is quite delicate - if you add one, do it exactly like this (mind the -'s) -#} {% if cookiecutter.license == \"MIT\" -%}  {% endif -%} {% if cookiecutter.license == \"BSD-2\" -%}  {% endif -%} {% if cookiecutter.license == \"GPL-3.0\" -%}  {% endif -%} {% if cookiecutter.license == \"LGPL-3.0\" -%}  {% endif -%} {% if cookiecutter.remote_url != \"None\" -%} {% if cookiecutter.github_actions_ci == \"Yes\" and cookiecutter|is_github -%}  {% endif -%} {% if cookiecutter.gitlab_ci == \"Yes\" and cookiecutter|is_gitlab -%}  {% endif -%} {% endif -%} {% if cookiecutter.pypi_release != \"No\" -%}  {% endif -%} {% if cookiecutter.readthedocs == \"Yes\" -%}  {% endif -%} {% if cookiecutter.codecovio == \"Yes\" -%}  {%- endif %} {{ \"\\n\" -}}</p>"},{"location":"twin-repos/cookiecutter-cpp-project/%7B%7Bcookiecutter.project_slug%7D%7D/#prerequisites","title":"Prerequisites","text":"<p>Building {{ cookiecutter.project_name }} requires the following software installed:</p> <ul> <li>A C++{{ cookiecutter.cxx_minimum_standard }}-compliant compiler</li> <li>CMake <code>&gt;= 3.9</code></li> <li>{{ cookiecutter.external_dependency }} {%- endif %}</li> <li>Doxygen (optional, documentation building is skipped if missing) {%- endif %}</li> <li>The testing framework Catch2 for building the test suite {%- endif %}</li> <li>Python <code>&gt;= 3.8</code> for building Python bindings</li> </ul>"},{"location":"twin-repos/cookiecutter-cpp-project/%7B%7Bcookiecutter.project_slug%7D%7D/#building-cookiecutterproject_name","title":"Building {{ cookiecutter.project_name }}","text":"<p>The following sequence of commands builds {{ cookiecutter.project_name }}. It assumes that your current working directory is the top-level directory of the freshly cloned repository:</p> <pre><code>mkdir build\ncd build\ncmake -DCMAKE_BUILD_TYPE=Release ..\ncmake --build .\n</code></pre> <p>The build process can be customized with the following CMake variables, which can be set by adding <code>-D&lt;var&gt;={ON, OFF}</code> to the <code>cmake</code> call:</p> <ul> <li><code>BUILD_TESTING</code>: Enable building of the test suite (default: <code>ON</code>)</li> <li><code>BUILD_DOCS</code>: Enable building the documentation (default: <code>ON</code>) {%- endif %}</li> <li><code>BUILD_PYTHON</code>: Enable building the Python bindings (default: <code>ON</code>)</li> </ul> <p>{% if cookiecutter.python_bindings == \"Yes\" %} If you wish to build and install the project as a Python project without having access to C++ build artifacts like libraries and executables, you can do so using <code>pip</code> from the root directory:</p> <p><pre><code>python -m pip install .\n</code></pre></p>"},{"location":"twin-repos/cookiecutter-cpp-project/%7B%7Bcookiecutter.project_slug%7D%7D/#testing-cookiecutterproject_name","title":"Testing {{ cookiecutter.project_name }}","text":"<p>When built according to the above explanation (with <code>-DBUILD_TESTING=ON</code>), the C++ test suite of <code>{{ cookiecutter.project_name }}</code> can be run using <code>ctest</code> from the build directory:</p> <p><pre><code>cd build\nctest\n</code></pre> {% if cookiecutter.python_bindings == \"Yes\" %} The Python test suite can be run by first <code>pip</code>-installing the Python package and then running <code>pytest</code> from the top-level directory:</p> <p><pre><code>python -m pip install .\npytest\n</code></pre></p>"},{"location":"twin-repos/cookiecutter-cpp-project/%7B%7Bcookiecutter.project_slug%7D%7D/#documentation","title":"Documentation","text":"<p>{% if cookiecutter.readthedocs == \"Yes\" %} {{ cookiecutter.project_name }} provides a Sphinx-based documentation, that can be browsed online at readthedocs.org. To build it locally, first ensure the requirements are installed by running this command from the top-level source directory:</p> <pre><code>pip install -r doc/requirements.txt\n</code></pre> <p>Then build the sphinx documentation from the top-level build directory:</p> <pre><code>cmake --build . --target sphinx-doc\n</code></pre> <p>The web documentation can then be browsed by opening <code>doc/sphinx/index.html</code> in your browser. {% elif cookiecutter.doxygen == \"Yes\" %} {{ cookiecutter.project_name }} provides a Doxygen documentation. You can build the documentation locally by making sure that <code>Doxygen</code> is installed on your system and running this command from the top-level build directory:</p> <pre><code>cmake --build . --target doxygen\n</code></pre> <p>The web documentation can then be browsed by opening <code>doc/html/index.html</code> in your browser. {% else %} {{ cookiecutter.project_name }} should provide a documentation.</p>"},{"location":"twin-repos/cookiecutter-cpp-project/%7B%7Bcookiecutter.project_slug%7D%7D/COPYING/","title":"COPYING","text":"<p>This is the list of copyright holders of {{ cookiecutter.project_name }}. {%- if cookiecutter.license != \"None\" %} For information on the license, see LICENSE.md.</p> <ul> <li>{{ cookiecutter.full_name }}, {{ current_year }}</li> </ul>"},{"location":"twin-repos/cookiecutter-cpp-project/%7B%7Bcookiecutter.project_slug%7D%7D/FILESTRUCTURE/","title":"FILESTRUCTURE","text":"<p>This is an explanation of the file structure that the cookiecutter generated for you:</p> <ul> <li>C++ source files:</li> <li><code>include/{{ cookiecutter.project_slug }}/{{ cookiecutter.project_slug }}.hpp</code> is the main     C++ header that declares the interface of your library.</li> <li><code>src/{{ cookiecutter.project_slug }}.cpp</code> is the main file that implements this library.</li> <li><code>app/{{ cookiecutter.project_slug }}_app.cpp</code> is an executable that uses the library.     This can e.g. be used to provide a command line interface for your project.</li> <li><code>tests/{{ cookiecutter.project_slug }}_t.cpp</code> contains the unit tests for the library.     The unit tests are written using Catch2. For further reading on what can be achieved     with Catch2, we recommend their tutorial.</li> <li><code>tests/tests.cpp</code> is the Catch2 testing driver. You do not need to change     this. Placing this in a separate compilation unit than the unit test     implementation decreases the compilation time of the test suite.</li> <li>The <code>python/{{ cookiecutter.project_slug.replace(\"-\", \"\") }}</code> directory contains a Python     package for the project. It contains a compiled Python module <code>_{{ cookiecutter.project_slug.replace(\"-\", \"\") }}</code>     that CMake generates from the Pybind11 source file <code>python/{{ cookiecutter.project_slug.replace(\"-\", \"\") }}/_{{ cookiecutter.project_slug }}.cpp</code>. Additionally, it contains pure Python sources (e.g. <code>__init__.py</code>) that     allow to wrap Python functionality around the compiled module.</li> <li>CMake build system files</li> <li><code>CMakeLists.txt</code> describes the CMake configuration script. You can find such files     in many directories. When CMake runs, the <code>CMakeLists.txt</code> from the top-level directory     executes top to bottom. Whenever a command <code>add_subdirectory(&lt;dir&gt;)</code> is executed,     the <code>CMakeLists.txt</code> file from the directory <code>&lt;dir&gt;</code> is immediately executed. A comprehensive     reference of CMake's capabilities can be found in the official CMake docs.     A well-written, opinionated book for beginners and experts is Modern CMake.</li> <li><code>{{ cookiecutter.project_slug }}Config.cmake.in</code> provides a template for the configuration     installed alongside your project. This is required to implement the transitivity of your dependency     on <code>{{ cookiecutter.external_dependency }}</code>: If downstream projects use your library, they should     automatically search for <code>{{ cookiecutter.external_dependency }}</code>. The config file template implements     exactly this logic. {%- endif %}</li> <li>The <code>ext</code> directory contains any submodules that were added by the cookiecutter.</li> <li>Documentation configuration files</li> <li>The Doxygen documentation is configured directly from <code>doc/CMakeLists.txt</code>.     To further configure the build, you can check the Doxygen Configuration Manual     for available options and add them with <code>set(DOXYGEN_&lt;param&gt; &lt;value&gt;)</code> before     the call to <code>doxygen_add_docs</code>. {%- endif %}</li> <li><code>doc/index.rst</code> contains the actual text of the Sphinx documentation. It is written     in reStructuredText, which is described in the Sphinx documentation.</li> <li><code>doc/conf.py</code> configures the Sphinx documentation that is build for readthedocs.     The file contains the default configuration of Sphinx that can be adapted according     to their Configuration Guide.     Additionally, the file contains build logic for readthedocs that integrates Doxygen     output through <code>breathe</code>. For information on what is possible with <code>breathe</code>, check     the Breathe documentation.</li> <li><code>doc/requirements-rtd.txt</code> collect a list of dependencies that need to be installed     on the Readthedocs build servers.</li> <li>Configuration for CI/Code analysis/Documentation services</li> <li><code>.pre-commit-config.yaml</code> contains a configuration for the pre-commit     tool. It was added because the <code>pre-commit</code> tool was found in your Python environment. {%- endif %}</li> <li><code>.github/workflows/ci.yml</code> describes the Github Workflow for Continuous     integration. For further reading on workflow files, we recommend the     introduction into Github Actions     and the reference of available options. {%- endif %}</li> <li><code>.gitlab-ci.yml</code> describes the configuration for Gitlab CI. For further     reading, we recommend Gitlabs quick start guide     and the Gitlab CI configuration reference {%- endif %}</li> <li><code>.readthedocs.yml</code> configures the documentation build process at ReadTheDocs.     To customize your build, you can have a look at the available options. {%- endif %}</li> <li><code>codecov.yml</code> configures the coverage checking from codecov.io. The     provided file is the default configuration plus suitable exclusions. For more options, check     their configuration reference.</li> <li>Markdown files with meta information on the project. Markdown is   a good language for these files, as it is easy to write and rendered into something beautiful by your git repository   hosting provider.</li> <li><code>README.md</code> is the file that users will typically see first when discovering your project.</li> <li><code>COPYING.md</code> provides a list of copyright holders.</li> <li><code>LICENSE.md</code> contains the license you selected.</li> <li><code>TODO.md</code> contains a list of TODOs after running the cookiecutter. Following the     instructions in that file will give you a fully functional repository with a lot     of integration into useful web services activated and running.</li> <li><code>FILESTRUCTURE.md</code> describes the generated files. Feel free to remove this from the     repository if you do not need it.</li> <li>Other files</li> <li><code>.gitignore</code> contains a default selection of files to omit from version control.</li> <li><code>.gitmodules</code> tracks the state of added submodules {%- endif %}</li> <li><code>pyproject.toml</code> provides information about the Python project and its toolchain.     <code>pip</code> uses this file to control the entire build process. Additionally, it can be     used to configure tools like <code>pytest</code>. {%- if cookiecutter.pypi_release == \"Yes\" -%}     Additionally, this file is needed for the automated release process to PyPI.</li> <li><code>.github/workflows/pypi.yml</code> defines the workflow that deploys to PyPI. The     configuration of this workflow is done in <code>pyproject.toml</code>.</li> <li><code>python/tests/test_python_bindings.py</code> defines a simple unit test suite for the Python     bindings that is based on Pytest.     <code>requirements-dev.txt</code> collects the required Python packages for running this     test suite, they can be installed with <code>python -m pip install -r requirements-dev.txt</code>.     The <code>pytest</code> run is configured in the <code>tools.pytest</code> section of <code>pyproject.toml</code>.</li> </ul>"},{"location":"twin-repos/cookiecutter-cpp-project/%7B%7Bcookiecutter.project_slug%7D%7D/LICENSE/","title":"LICENSE","text":"<p>Copyright {{ current_year }}, The copyright holders according to COPYING.md</p> <p>{% if cookiecutter.license == \"MIT\" -%} Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. {%- endif -%} {% if cookiecutter.license == \"BSD-2\" -%} Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:</p> <ol> <li> <p>Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.</p> </li> <li> <p>Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.</p> </li> </ol> <p>THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. {%- endif -%}</p>"},{"location":"twin-repos/cookiecutter-cpp-project/%7B%7Bcookiecutter.project_slug%7D%7D/LICENSE/#gnu-general-public-license","title":"GNU GENERAL PUBLIC LICENSE","text":"<p>Version 3, 29 June 2007</p> <p>Copyright (C) 2007 Free Software Foundation, Inc. https://fsf.org/</p> <p>Everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed.</p>"},{"location":"twin-repos/cookiecutter-cpp-project/%7B%7Bcookiecutter.project_slug%7D%7D/LICENSE/#preamble","title":"Preamble","text":"<p>The GNU General Public License is a free, copyleft license for software and other kinds of works.</p> <p>The licenses for most software and other practical works are designed to take away your freedom to share and change the works. By contrast, the GNU General Public License is intended to guarantee your freedom to share and change all versions of a program--to make sure it remains free software for all its users. We, the Free Software Foundation, use the GNU General Public License for most of our software; it applies also to any other work released this way by its authors. You can apply it to your programs, too.</p> <p>When we speak of free software, we are referring to freedom, not price. Our General Public Licenses are designed to make sure that you have the freedom to distribute copies of free software (and charge for them if you wish), that you receive source code or can get it if you want it, that you can change the software or use pieces of it in new free programs, and that you know you can do these things.</p> <p>To protect your rights, we need to prevent others from denying you these rights or asking you to surrender the rights. Therefore, you have certain responsibilities if you distribute copies of the software, or if you modify it: responsibilities to respect the freedom of others.</p> <p>For example, if you distribute copies of such a program, whether gratis or for a fee, you must pass on to the recipients the same freedoms that you received. You must make sure that they, too, receive or can get the source code. And you must show them these terms so they know their rights.</p> <p>Developers that use the GNU GPL protect your rights with two steps: (1) assert copyright on the software, and (2) offer you this License giving you legal permission to copy, distribute and/or modify it.</p> <p>For the developers' and authors' protection, the GPL clearly explains that there is no warranty for this free software. For both users' and authors' sake, the GPL requires that modified versions be marked as changed, so that their problems will not be attributed erroneously to authors of previous versions.</p> <p>Some devices are designed to deny users access to install or run modified versions of the software inside them, although the manufacturer can do so. This is fundamentally incompatible with the aim of protecting users' freedom to change the software. The systematic pattern of such abuse occurs in the area of products for individuals to use, which is precisely where it is most unacceptable. Therefore, we have designed this version of the GPL to prohibit the practice for those products. If such problems arise substantially in other domains, we stand ready to extend this provision to those domains in future versions of the GPL, as needed to protect the freedom of users.</p> <p>Finally, every program is threatened constantly by software patents. States should not allow patents to restrict development and use of software on general-purpose computers, but in those that do, we wish to avoid the special danger that patents applied to a free program could make it effectively proprietary. To prevent this, the GPL assures that patents cannot be used to render the program non-free.</p> <p>The precise terms and conditions for copying, distribution and modification follow.</p>"},{"location":"twin-repos/cookiecutter-cpp-project/%7B%7Bcookiecutter.project_slug%7D%7D/LICENSE/#terms-and-conditions","title":"TERMS AND CONDITIONS","text":""},{"location":"twin-repos/cookiecutter-cpp-project/%7B%7Bcookiecutter.project_slug%7D%7D/LICENSE/#0-definitions","title":"0. Definitions.","text":"<p>\"This License\" refers to version 3 of the GNU General Public License.</p> <p>\"Copyright\" also means copyright-like laws that apply to other kinds of works, such as semiconductor masks.</p> <p>\"The Program\" refers to any copyrightable work licensed under this License. Each licensee is addressed as \"you\". \"Licensees\" and \"recipients\" may be individuals or organizations.</p> <p>To \"modify\" a work means to copy from or adapt all or part of the work in a fashion requiring copyright permission, other than the making of an exact copy. The resulting work is called a \"modified version\" of the earlier work or a work \"based on\" the earlier work.</p> <p>A \"covered work\" means either the unmodified Program or a work based on the Program.</p> <p>To \"propagate\" a work means to do anything with it that, without permission, would make you directly or secondarily liable for infringement under applicable copyright law, except executing it on a computer or modifying a private copy. Propagation includes copying, distribution (with or without modification), making available to the public, and in some countries other activities as well.</p> <p>To \"convey\" a work means any kind of propagation that enables other parties to make or receive copies. Mere interaction with a user through a computer network, with no transfer of a copy, is not conveying.</p> <p>An interactive user interface displays \"Appropriate Legal Notices\" to the extent that it includes a convenient and prominently visible feature that (1) displays an appropriate copyright notice, and (2) tells the user that there is no warranty for the work (except to the extent that warranties are provided), that licensees may convey the work under this License, and how to view a copy of this License. If the interface presents a list of user commands or options, such as a menu, a prominent item in the list meets this criterion.</p>"},{"location":"twin-repos/cookiecutter-cpp-project/%7B%7Bcookiecutter.project_slug%7D%7D/LICENSE/#1-source-code","title":"1. Source Code.","text":"<p>The \"source code\" for a work means the preferred form of the work for making modifications to it. \"Object code\" means any non-source form of a work.</p> <p>A \"Standard Interface\" means an interface that either is an official standard defined by a recognized standards body, or, in the case of interfaces specified for a particular programming language, one that is widely used among developers working in that language.</p> <p>The \"System Libraries\" of an executable work include anything, other than the work as a whole, that (a) is included in the normal form of packaging a Major Component, but which is not part of that Major Component, and (b) serves only to enable use of the work with that Major Component, or to implement a Standard Interface for which an implementation is available to the public in source code form. A \"Major Component\", in this context, means a major essential component (kernel, window system, and so on) of the specific operating system (if any) on which the executable work runs, or a compiler used to produce the work, or an object code interpreter used to run it.</p> <p>The \"Corresponding Source\" for a work in object code form means all the source code needed to generate, install, and (for an executable work) run the object code and to modify the work, including scripts to control those activities. However, it does not include the work's System Libraries, or general-purpose tools or generally available free programs which are used unmodified in performing those activities but which are not part of the work. For example, Corresponding Source includes interface definition files associated with source files for the work, and the source code for shared libraries and dynamically linked subprograms that the work is specifically designed to require, such as by intimate data communication or control flow between those subprograms and other parts of the work.</p> <p>The Corresponding Source need not include anything that users can regenerate automatically from other parts of the Corresponding Source.</p> <p>The Corresponding Source for a work in source code form is that same work.</p>"},{"location":"twin-repos/cookiecutter-cpp-project/%7B%7Bcookiecutter.project_slug%7D%7D/LICENSE/#2-basic-permissions","title":"2. Basic Permissions.","text":"<p>All rights granted under this License are granted for the term of copyright on the Program, and are irrevocable provided the stated conditions are met. This License explicitly affirms your unlimited permission to run the unmodified Program. The output from running a covered work is covered by this License only if the output, given its content, constitutes a covered work. This License acknowledges your rights of fair use or other equivalent, as provided by copyright law.</p> <p>You may make, run and propagate covered works that you do not convey, without conditions so long as your license otherwise remains in force. You may convey covered works to others for the sole purpose of having them make modifications exclusively for you, or provide you with facilities for running those works, provided that you comply with the terms of this License in conveying all material for which you do not control copyright. Those thus making or running the covered works for you must do so exclusively on your behalf, under your direction and control, on terms that prohibit them from making any copies of your copyrighted material outside their relationship with you.</p> <p>Conveying under any other circumstances is permitted solely under the conditions stated below. Sublicensing is not allowed; section 10 makes it unnecessary.</p>"},{"location":"twin-repos/cookiecutter-cpp-project/%7B%7Bcookiecutter.project_slug%7D%7D/LICENSE/#3-protecting-users-legal-rights-from-anti-circumvention-law","title":"3. Protecting Users' Legal Rights From Anti-Circumvention Law.","text":"<p>No covered work shall be deemed part of an effective technological measure under any applicable law fulfilling obligations under article 11 of the WIPO copyright treaty adopted on 20 December 1996, or similar laws prohibiting or restricting circumvention of such measures.</p> <p>When you convey a covered work, you waive any legal power to forbid circumvention of technological measures to the extent such circumvention is effected by exercising rights under this License with respect to the covered work, and you disclaim any intention to limit operation or modification of the work as a means of enforcing, against the work's users, your or third parties' legal rights to forbid circumvention of technological measures.</p>"},{"location":"twin-repos/cookiecutter-cpp-project/%7B%7Bcookiecutter.project_slug%7D%7D/LICENSE/#4-conveying-verbatim-copies","title":"4. Conveying Verbatim Copies.","text":"<p>You may convey verbatim copies of the Program's source code as you receive it, in any medium, provided that you conspicuously and appropriately publish on each copy an appropriate copyright notice; keep intact all notices stating that this License and any non-permissive terms added in accord with section 7 apply to the code; keep intact all notices of the absence of any warranty; and give all recipients a copy of this License along with the Program.</p> <p>You may charge any price or no price for each copy that you convey, and you may offer support or warranty protection for a fee.</p>"},{"location":"twin-repos/cookiecutter-cpp-project/%7B%7Bcookiecutter.project_slug%7D%7D/LICENSE/#5-conveying-modified-source-versions","title":"5. Conveying Modified Source Versions.","text":"<p>You may convey a work based on the Program, or the modifications to produce it from the Program, in the form of source code under the terms of section 4, provided that you also meet all of these conditions:</p> <ul> <li>a) The work must carry prominent notices stating that you modified     it, and giving a relevant date.</li> <li>b) The work must carry prominent notices stating that it is     released under this License and any conditions added under     section 7. This requirement modifies the requirement in section 4     to \"keep intact all notices\".</li> <li>c) You must license the entire work, as a whole, under this     License to anyone who comes into possession of a copy. This     License will therefore apply, along with any applicable section 7     additional terms, to the whole of the work, and all its parts,     regardless of how they are packaged. This License gives no     permission to license the work in any other way, but it does not     invalidate such permission if you have separately received it.</li> <li>d) If the work has interactive user interfaces, each must display     Appropriate Legal Notices; however, if the Program has interactive     interfaces that do not display Appropriate Legal Notices, your     work need not make them do so.</li> </ul> <p>A compilation of a covered work with other separate and independent works, which are not by their nature extensions of the covered work, and which are not combined with it such as to form a larger program, in or on a volume of a storage or distribution medium, is called an \"aggregate\" if the compilation and its resulting copyright are not used to limit the access or legal rights of the compilation's users beyond what the individual works permit. Inclusion of a covered work in an aggregate does not cause this License to apply to the other parts of the aggregate.</p>"},{"location":"twin-repos/cookiecutter-cpp-project/%7B%7Bcookiecutter.project_slug%7D%7D/LICENSE/#6-conveying-non-source-forms","title":"6. Conveying Non-Source Forms.","text":"<p>You may convey a covered work in object code form under the terms of sections 4 and 5, provided that you also convey the machine-readable Corresponding Source under the terms of this License, in one of these ways:</p> <ul> <li>a) Convey the object code in, or embodied in, a physical product     (including a physical distribution medium), accompanied by the     Corresponding Source fixed on a durable physical medium     customarily used for software interchange.</li> <li>b) Convey the object code in, or embodied in, a physical product     (including a physical distribution medium), accompanied by a     written offer, valid for at least three years and valid for as     long as you offer spare parts or customer support for that product     model, to give anyone who possesses the object code either (1) a     copy of the Corresponding Source for all the software in the     product that is covered by this License, on a durable physical     medium customarily used for software interchange, for a price no     more than your reasonable cost of physically performing this     conveying of source, or (2) access to copy the Corresponding     Source from a network server at no charge.</li> <li>c) Convey individual copies of the object code with a copy of the     written offer to provide the Corresponding Source. This     alternative is allowed only occasionally and noncommercially, and     only if you received the object code with such an offer, in accord     with subsection 6b.</li> <li>d) Convey the object code by offering access from a designated     place (gratis or for a charge), and offer equivalent access to the     Corresponding Source in the same way through the same place at no     further charge. You need not require recipients to copy the     Corresponding Source along with the object code. If the place to     copy the object code is a network server, the Corresponding Source     may be on a different server (operated by you or a third party)     that supports equivalent copying facilities, provided you maintain     clear directions next to the object code saying where to find the     Corresponding Source. Regardless of what server hosts the     Corresponding Source, you remain obligated to ensure that it is     available for as long as needed to satisfy these requirements.</li> <li>e) Convey the object code using peer-to-peer transmission,     provided you inform other peers where the object code and     Corresponding Source of the work are being offered to the general     public at no charge under subsection 6d.</li> </ul> <p>A separable portion of the object code, whose source code is excluded from the Corresponding Source as a System Library, need not be included in conveying the object code work.</p> <p>A \"User Product\" is either (1) a \"consumer product\", which means any tangible personal property which is normally used for personal, family, or household purposes, or (2) anything designed or sold for incorporation into a dwelling. In determining whether a product is a consumer product, doubtful cases shall be resolved in favor of coverage. For a particular product received by a particular user, \"normally used\" refers to a typical or common use of that class of product, regardless of the status of the particular user or of the way in which the particular user actually uses, or expects or is expected to use, the product. A product is a consumer product regardless of whether the product has substantial commercial, industrial or non-consumer uses, unless such uses represent the only significant mode of use of the product.</p> <p>\"Installation Information\" for a User Product means any methods, procedures, authorization keys, or other information required to install and execute modified versions of a covered work in that User Product from a modified version of its Corresponding Source. The information must suffice to ensure that the continued functioning of the modified object code is in no case prevented or interfered with solely because modification has been made.</p> <p>If you convey an object code work under this section in, or with, or specifically for use in, a User Product, and the conveying occurs as part of a transaction in which the right of possession and use of the User Product is transferred to the recipient in perpetuity or for a fixed term (regardless of how the transaction is characterized), the Corresponding Source conveyed under this section must be accompanied by the Installation Information. But this requirement does not apply if neither you nor any third party retains the ability to install modified object code on the User Product (for example, the work has been installed in ROM).</p> <p>The requirement to provide Installation Information does not include a requirement to continue to provide support service, warranty, or updates for a work that has been modified or installed by the recipient, or for the User Product in which it has been modified or installed. Access to a network may be denied when the modification itself materially and adversely affects the operation of the network or violates the rules and protocols for communication across the network.</p> <p>Corresponding Source conveyed, and Installation Information provided, in accord with this section must be in a format that is publicly documented (and with an implementation available to the public in source code form), and must require no special password or key for unpacking, reading or copying.</p>"},{"location":"twin-repos/cookiecutter-cpp-project/%7B%7Bcookiecutter.project_slug%7D%7D/LICENSE/#7-additional-terms","title":"7. Additional Terms.","text":"<p>\"Additional permissions\" are terms that supplement the terms of this License by making exceptions from one or more of its conditions. Additional permissions that are applicable to the entire Program shall be treated as though they were included in this License, to the extent that they are valid under applicable law. If additional permissions apply only to part of the Program, that part may be used separately under those permissions, but the entire Program remains governed by this License without regard to the additional permissions.</p> <p>When you convey a copy of a covered work, you may at your option remove any additional permissions from that copy, or from any part of it. (Additional permissions may be written to require their own removal in certain cases when you modify the work.) You may place additional permissions on material, added by you to a covered work, for which you have or can give appropriate copyright permission.</p> <p>Notwithstanding any other provision of this License, for material you add to a covered work, you may (if authorized by the copyright holders of that material) supplement the terms of this License with terms:</p> <ul> <li>a) Disclaiming warranty or limiting liability differently from the     terms of sections 15 and 16 of this License; or</li> <li>b) Requiring preservation of specified reasonable legal notices or     author attributions in that material or in the Appropriate Legal     Notices displayed by works containing it; or</li> <li>c) Prohibiting misrepresentation of the origin of that material,     or requiring that modified versions of such material be marked in     reasonable ways as different from the original version; or</li> <li>d) Limiting the use for publicity purposes of names of licensors     or authors of the material; or</li> <li>e) Declining to grant rights under trademark law for use of some     trade names, trademarks, or service marks; or</li> <li>f) Requiring indemnification of licensors and authors of that     material by anyone who conveys the material (or modified versions     of it) with contractual assumptions of liability to the recipient,     for any liability that these contractual assumptions directly     impose on those licensors and authors.</li> </ul> <p>All other non-permissive additional terms are considered \"further restrictions\" within the meaning of section 10. If the Program as you received it, or any part of it, contains a notice stating that it is governed by this License along with a term that is a further restriction, you may remove that term. If a license document contains a further restriction but permits relicensing or conveying under this License, you may add to a covered work material governed by the terms of that license document, provided that the further restriction does not survive such relicensing or conveying.</p> <p>If you add terms to a covered work in accord with this section, you must place, in the relevant source files, a statement of the additional terms that apply to those files, or a notice indicating where to find the applicable terms.</p> <p>Additional terms, permissive or non-permissive, may be stated in the form of a separately written license, or stated as exceptions; the above requirements apply either way.</p>"},{"location":"twin-repos/cookiecutter-cpp-project/%7B%7Bcookiecutter.project_slug%7D%7D/LICENSE/#8-termination","title":"8. Termination.","text":"<p>You may not propagate or modify a covered work except as expressly provided under this License. Any attempt otherwise to propagate or modify it is void, and will automatically terminate your rights under this License (including any patent licenses granted under the third paragraph of section 11).</p> <p>However, if you cease all violation of this License, then your license from a particular copyright holder is reinstated (a) provisionally, unless and until the copyright holder explicitly and finally terminates your license, and (b) permanently, if the copyright holder fails to notify you of the violation by some reasonable means prior to 60 days after the cessation.</p> <p>Moreover, your license from a particular copyright holder is reinstated permanently if the copyright holder notifies you of the violation by some reasonable means, this is the first time you have received notice of violation of this License (for any work) from that copyright holder, and you cure the violation prior to 30 days after your receipt of the notice.</p> <p>Termination of your rights under this section does not terminate the licenses of parties who have received copies or rights from you under this License. If your rights have been terminated and not permanently reinstated, you do not qualify to receive new licenses for the same material under section 10.</p>"},{"location":"twin-repos/cookiecutter-cpp-project/%7B%7Bcookiecutter.project_slug%7D%7D/LICENSE/#9-acceptance-not-required-for-having-copies","title":"9. Acceptance Not Required for Having Copies.","text":"<p>You are not required to accept this License in order to receive or run a copy of the Program. Ancillary propagation of a covered work occurring solely as a consequence of using peer-to-peer transmission to receive a copy likewise does not require acceptance. However, nothing other than this License grants you permission to propagate or modify any covered work. These actions infringe copyright if you do not accept this License. Therefore, by modifying or propagating a covered work, you indicate your acceptance of this License to do so.</p>"},{"location":"twin-repos/cookiecutter-cpp-project/%7B%7Bcookiecutter.project_slug%7D%7D/LICENSE/#10-automatic-licensing-of-downstream-recipients","title":"10. Automatic Licensing of Downstream Recipients.","text":"<p>Each time you convey a covered work, the recipient automatically receives a license from the original licensors, to run, modify and propagate that work, subject to this License. You are not responsible for enforcing compliance by third parties with this License.</p> <p>An \"entity transaction\" is a transaction transferring control of an organization, or substantially all assets of one, or subdividing an organization, or merging organizations. If propagation of a covered work results from an entity transaction, each party to that transaction who receives a copy of the work also receives whatever licenses to the work the party's predecessor in interest had or could give under the previous paragraph, plus a right to possession of the Corresponding Source of the work from the predecessor in interest, if the predecessor has it or can get it with reasonable efforts.</p> <p>You may not impose any further restrictions on the exercise of the rights granted or affirmed under this License. For example, you may not impose a license fee, royalty, or other charge for exercise of rights granted under this License, and you may not initiate litigation (including a cross-claim or counterclaim in a lawsuit) alleging that any patent claim is infringed by making, using, selling, offering for sale, or importing the Program or any portion of it.</p>"},{"location":"twin-repos/cookiecutter-cpp-project/%7B%7Bcookiecutter.project_slug%7D%7D/LICENSE/#11-patents","title":"11. Patents.","text":"<p>A \"contributor\" is a copyright holder who authorizes use under this License of the Program or a work on which the Program is based. The work thus licensed is called the contributor's \"contributor version\".</p> <p>A contributor's \"essential patent claims\" are all patent claims owned or controlled by the contributor, whether already acquired or hereafter acquired, that would be infringed by some manner, permitted by this License, of making, using, or selling its contributor version, but do not include claims that would be infringed only as a consequence of further modification of the contributor version. For purposes of this definition, \"control\" includes the right to grant patent sublicenses in a manner consistent with the requirements of this License.</p> <p>Each contributor grants you a non-exclusive, worldwide, royalty-free patent license under the contributor's essential patent claims, to make, use, sell, offer for sale, import and otherwise run, modify and propagate the contents of its contributor version.</p> <p>In the following three paragraphs, a \"patent license\" is any express agreement or commitment, however denominated, not to enforce a patent (such as an express permission to practice a patent or covenant not to sue for patent infringement). To \"grant\" such a patent license to a party means to make such an agreement or commitment not to enforce a patent against the party.</p> <p>If you convey a covered work, knowingly relying on a patent license, and the Corresponding Source of the work is not available for anyone to copy, free of charge and under the terms of this License, through a publicly available network server or other readily accessible means, then you must either (1) cause the Corresponding Source to be so available, or (2) arrange to deprive yourself of the benefit of the patent license for this particular work, or (3) arrange, in a manner consistent with the requirements of this License, to extend the patent license to downstream recipients. \"Knowingly relying\" means you have actual knowledge that, but for the patent license, your conveying the covered work in a country, or your recipient's use of the covered work in a country, would infringe one or more identifiable patents in that country that you have reason to believe are valid.</p> <p>If, pursuant to or in connection with a single transaction or arrangement, you convey, or propagate by procuring conveyance of, a covered work, and grant a patent license to some of the parties receiving the covered work authorizing them to use, propagate, modify or convey a specific copy of the covered work, then the patent license you grant is automatically extended to all recipients of the covered work and works based on it.</p> <p>A patent license is \"discriminatory\" if it does not include within the scope of its coverage, prohibits the exercise of, or is conditioned on the non-exercise of one or more of the rights that are specifically granted under this License. You may not convey a covered work if you are a party to an arrangement with a third party that is in the business of distributing software, under which you make payment to the third party based on the extent of your activity of conveying the work, and under which the third party grants, to any of the parties who would receive the covered work from you, a discriminatory patent license (a) in connection with copies of the covered work conveyed by you (or copies made from those copies), or (b) primarily for and in connection with specific products or compilations that contain the covered work, unless you entered into that arrangement, or that patent license was granted, prior to 28 March 2007.</p> <p>Nothing in this License shall be construed as excluding or limiting any implied license or other defenses to infringement that may otherwise be available to you under applicable patent law.</p>"},{"location":"twin-repos/cookiecutter-cpp-project/%7B%7Bcookiecutter.project_slug%7D%7D/LICENSE/#12-no-surrender-of-others-freedom","title":"12. No Surrender of Others' Freedom.","text":"<p>If conditions are imposed on you (whether by court order, agreement or otherwise) that contradict the conditions of this License, they do not excuse you from the conditions of this License. If you cannot convey a covered work so as to satisfy simultaneously your obligations under this License and any other pertinent obligations, then as a consequence you may not convey it at all. For example, if you agree to terms that obligate you to collect a royalty for further conveying from those to whom you convey the Program, the only way you could satisfy both those terms and this License would be to refrain entirely from conveying the Program.</p>"},{"location":"twin-repos/cookiecutter-cpp-project/%7B%7Bcookiecutter.project_slug%7D%7D/LICENSE/#13-use-with-the-gnu-affero-general-public-license","title":"13. Use with the GNU Affero General Public License.","text":"<p>Notwithstanding any other provision of this License, you have permission to link or combine any covered work with a work licensed under version 3 of the GNU Affero General Public License into a single combined work, and to convey the resulting work. The terms of this License will continue to apply to the part which is the covered work, but the special requirements of the GNU Affero General Public License, section 13, concerning interaction through a network will apply to the combination as such.</p>"},{"location":"twin-repos/cookiecutter-cpp-project/%7B%7Bcookiecutter.project_slug%7D%7D/LICENSE/#14-revised-versions-of-this-license","title":"14. Revised Versions of this License.","text":"<p>The Free Software Foundation may publish revised and/or new versions of the GNU General Public License from time to time. Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns.</p> <p>Each version is given a distinguishing version number. If the Program specifies that a certain numbered version of the GNU General Public License \"or any later version\" applies to it, you have the option of following the terms and conditions either of that numbered version or of any later version published by the Free Software Foundation. If the Program does not specify a version number of the GNU General Public License, you may choose any version ever published by the Free Software Foundation.</p> <p>If the Program specifies that a proxy can decide which future versions of the GNU General Public License can be used, that proxy's public statement of acceptance of a version permanently authorizes you to choose that version for the Program.</p> <p>Later license versions may give you additional or different permissions. However, no additional obligations are imposed on any author or copyright holder as a result of your choosing to follow a later version.</p>"},{"location":"twin-repos/cookiecutter-cpp-project/%7B%7Bcookiecutter.project_slug%7D%7D/LICENSE/#15-disclaimer-of-warranty","title":"15. Disclaimer of Warranty.","text":"<p>THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.</p>"},{"location":"twin-repos/cookiecutter-cpp-project/%7B%7Bcookiecutter.project_slug%7D%7D/LICENSE/#16-limitation-of-liability","title":"16. Limitation of Liability.","text":"<p>IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.</p>"},{"location":"twin-repos/cookiecutter-cpp-project/%7B%7Bcookiecutter.project_slug%7D%7D/LICENSE/#17-interpretation-of-sections-15-and-16","title":"17. Interpretation of Sections 15 and 16.","text":"<p>If the disclaimer of warranty and limitation of liability provided above cannot be given local legal effect according to their terms, reviewing courts shall apply local law that most closely approximates an absolute waiver of all civil liability in connection with the Program, unless a warranty or assumption of liability accompanies a copy of the Program in return for a fee.</p> <p>END OF TERMS AND CONDITIONS</p>"},{"location":"twin-repos/cookiecutter-cpp-project/%7B%7Bcookiecutter.project_slug%7D%7D/LICENSE/#how-to-apply-these-terms-to-your-new-programs","title":"How to Apply These Terms to Your New Programs","text":"<p>If you develop a new program, and you want it to be of the greatest possible use to the public, the best way to achieve this is to make it free software which everyone can redistribute and change under these terms.</p> <p>To do so, attach the following notices to the program. It is safest to attach them to the start of each source file to most effectively state the exclusion of warranty; and each file should have at least the \"copyright\" line and a pointer to where the full notice is found.</p> <pre><code>    &lt;one line to give the program's name and a brief idea of what it does.&gt;\n    Copyright (C) &lt;year&gt;  &lt;name of author&gt;\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.\n</code></pre> <p>Also add information on how to contact you by electronic and paper mail.</p> <p>If the program does terminal interaction, make it output a short notice like this when it starts in an interactive mode:</p> <pre><code>    &lt;program&gt;  Copyright (C) &lt;year&gt;  &lt;name of author&gt;\n    This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n</code></pre> <p>The hypothetical commands `show w' and `show c' should show the appropriate parts of the General Public License. Of course, your program's commands might be different; for a GUI interface, you would use an \"about box\".</p> <p>You should also get your employer (if you work as a programmer) or school, if any, to sign a \"copyright disclaimer\" for the program, if necessary. For more information on this, and how to apply and follow the GNU GPL, see https://www.gnu.org/licenses/.</p> <p>The GNU General Public License does not permit incorporating your program into proprietary programs. If your program is a subroutine library, you may consider it more useful to permit linking proprietary applications with the library. If this is what you want to do, use the GNU Lesser General Public License instead of this License. But first, please read https://www.gnu.org/licenses/why-not-lgpl.html. {%- endif -%}</p>"},{"location":"twin-repos/cookiecutter-cpp-project/%7B%7Bcookiecutter.project_slug%7D%7D/LICENSE/#gnu-lesser-general-public-license","title":"GNU LESSER GENERAL PUBLIC LICENSE","text":"<p>Version 3, 29 June 2007</p> <p>Copyright (C) 2007 Free Software Foundation, Inc. https://fsf.org/</p> <p>Everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed.</p> <p>This version of the GNU Lesser General Public License incorporates the terms and conditions of version 3 of the GNU General Public License, supplemented by the additional permissions listed below.</p>"},{"location":"twin-repos/cookiecutter-cpp-project/%7B%7Bcookiecutter.project_slug%7D%7D/LICENSE/#0-additional-definitions","title":"0. Additional Definitions.","text":"<p>As used herein, \"this License\" refers to version 3 of the GNU Lesser General Public License, and the \"GNU GPL\" refers to version 3 of the GNU General Public License.</p> <p>\"The Library\" refers to a covered work governed by this License, other than an Application or a Combined Work as defined below.</p> <p>An \"Application\" is any work that makes use of an interface provided by the Library, but which is not otherwise based on the Library. Defining a subclass of a class defined by the Library is deemed a mode of using an interface provided by the Library.</p> <p>A \"Combined Work\" is a work produced by combining or linking an Application with the Library. The particular version of the Library with which the Combined Work was made is also called the \"Linked Version\".</p> <p>The \"Minimal Corresponding Source\" for a Combined Work means the Corresponding Source for the Combined Work, excluding any source code for portions of the Combined Work that, considered in isolation, are based on the Application, and not on the Linked Version.</p> <p>The \"Corresponding Application Code\" for a Combined Work means the object code and/or source code for the Application, including any data and utility programs needed for reproducing the Combined Work from the Application, but excluding the System Libraries of the Combined Work.</p>"},{"location":"twin-repos/cookiecutter-cpp-project/%7B%7Bcookiecutter.project_slug%7D%7D/LICENSE/#1-exception-to-section-3-of-the-gnu-gpl","title":"1. Exception to Section 3 of the GNU GPL.","text":"<p>You may convey a covered work under sections 3 and 4 of this License without being bound by section 3 of the GNU GPL.</p>"},{"location":"twin-repos/cookiecutter-cpp-project/%7B%7Bcookiecutter.project_slug%7D%7D/LICENSE/#2-conveying-modified-versions","title":"2. Conveying Modified Versions.","text":"<p>If you modify a copy of the Library, and, in your modifications, a facility refers to a function or data to be supplied by an Application that uses the facility (other than as an argument passed when the facility is invoked), then you may convey a copy of the modified version:</p> <ul> <li>a) under this License, provided that you make a good faith effort     to ensure that, in the event an Application does not supply the     function or data, the facility still operates, and performs     whatever part of its purpose remains meaningful, or</li> <li>b) under the GNU GPL, with none of the additional permissions of     this License applicable to that copy.</li> </ul>"},{"location":"twin-repos/cookiecutter-cpp-project/%7B%7Bcookiecutter.project_slug%7D%7D/LICENSE/#3-object-code-incorporating-material-from-library-header-files","title":"3. Object Code Incorporating Material from Library Header Files.","text":"<p>The object code form of an Application may incorporate material from a header file that is part of the Library. You may convey such object code under terms of your choice, provided that, if the incorporated material is not limited to numerical parameters, data structure layouts and accessors, or small macros, inline functions and templates (ten or fewer lines in length), you do both of the following:</p> <ul> <li>a) Give prominent notice with each copy of the object code that     the Library is used in it and that the Library and its use are     covered by this License.</li> <li>b) Accompany the object code with a copy of the GNU GPL and this     license document.</li> </ul>"},{"location":"twin-repos/cookiecutter-cpp-project/%7B%7Bcookiecutter.project_slug%7D%7D/LICENSE/#4-combined-works","title":"4. Combined Works.","text":"<p>You may convey a Combined Work under terms of your choice that, taken together, effectively do not restrict modification of the portions of the Library contained in the Combined Work and reverse engineering for debugging such modifications, if you also do each of the following:</p> <ul> <li>a) Give prominent notice with each copy of the Combined Work that     the Library is used in it and that the Library and its use are     covered by this License.</li> <li>b) Accompany the Combined Work with a copy of the GNU GPL and this     license document.</li> <li>c) For a Combined Work that displays copyright notices during     execution, include the copyright notice for the Library among     these notices, as well as a reference directing the user to the     copies of the GNU GPL and this license document.</li> <li>d) Do one of the following:<ul> <li>0) Convey the Minimal Corresponding Source under the terms of     this License, and the Corresponding Application Code in a form     suitable for, and under terms that permit, the user to     recombine or relink the Application with a modified version of     the Linked Version to produce a modified Combined Work, in the     manner specified by section 6 of the GNU GPL for conveying     Corresponding Source.</li> <li>1) Use a suitable shared library mechanism for linking with     the Library. A suitable mechanism is one that (a) uses at run     time a copy of the Library already present on the user's     computer system, and (b) will operate properly with a modified     version of the Library that is interface-compatible with the     Linked Version.</li> </ul> </li> <li>e) Provide Installation Information, but only if you would     otherwise be required to provide such information under section 6     of the GNU GPL, and only to the extent that such information is     necessary to install and execute a modified version of the     Combined Work produced by recombining or relinking the Application     with a modified version of the Linked Version. (If you use option     4d0, the Installation Information must accompany the Minimal     Corresponding Source and Corresponding Application Code. If you     use option 4d1, you must provide the Installation Information in     the manner specified by section 6 of the GNU GPL for conveying     Corresponding Source.)</li> </ul>"},{"location":"twin-repos/cookiecutter-cpp-project/%7B%7Bcookiecutter.project_slug%7D%7D/LICENSE/#5-combined-libraries","title":"5. Combined Libraries.","text":"<p>You may place library facilities that are a work based on the Library side by side in a single library together with other library facilities that are not Applications and are not covered by this License, and convey such a combined library under terms of your choice, if you do both of the following:</p> <ul> <li>a) Accompany the combined library with a copy of the same work     based on the Library, uncombined with any other library     facilities, conveyed under the terms of this License.</li> <li>b) Give prominent notice with the combined library that part of it     is a work based on the Library, and explaining where to find the     accompanying uncombined form of the same work.</li> </ul>"},{"location":"twin-repos/cookiecutter-cpp-project/%7B%7Bcookiecutter.project_slug%7D%7D/LICENSE/#6-revised-versions-of-the-gnu-lesser-general-public-license","title":"6. Revised Versions of the GNU Lesser General Public License.","text":"<p>The Free Software Foundation may publish revised and/or new versions of the GNU Lesser General Public License from time to time. Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns.</p> <p>Each version is given a distinguishing version number. If the Library as you received it specifies that a certain numbered version of the GNU Lesser General Public License \"or any later version\" applies to it, you have the option of following the terms and conditions either of that published version or of any later version published by the Free Software Foundation. If the Library as you received it does not specify a version number of the GNU Lesser General Public License, you may choose any version of the GNU Lesser General Public License ever published by the Free Software Foundation.</p> <p>If the Library as you received it specifies that a proxy can decide whether future versions of the GNU Lesser General Public License shall apply, that proxy's public statement of acceptance of any version is permanent authorization for you to choose that version for the Library.</p>"},{"location":"twin-repos/cookiecutter-cpp-project/%7B%7Bcookiecutter.project_slug%7D%7D/TODO/","title":"TODO","text":"<p>This TODO list is automatically generated from the cookiecutter-cpp-project template. The following tasks need to be done to get a fully working project:</p> <p>{% if cookiecutter.remote_url == 'None' -%} * Set up a remote repository. You can e.g. create a project in GitHub or GitLab and run   the following commands in your locally generated project folder: <code>git remote add origin &lt;Remote-URL&gt;</code>   For a seamless integration, the name of the project should also be <code>{{ cookiecutter.project_slug }}</code>. {%- else %} * Push to your remote repository for the first time by doing <code>git push origin main</code>. {%- endif %} * Make sure that the following software is installed on your computer:   * A C++-{{ cookiecutter.cxx_minimum_standard}}-compliant C++ compiler   * CMake <code>&gt;= 3.9</code> {%- if cookiecutter.use_submodules == \"No\" %}   * The testing framework Catch2 {%- endif %} {%- if cookiecutter.external_dependency != \"None\" %}   * Adapt your list of external dependencies in <code>CMakeLists.txt</code> and <code>{{ cookiecutter.project_slug }}Config.cmake.in</code>.     You can e.g.     * Link your library or applications to your dependency. For this to work, you need       to see if your dependency exports targets and what their name is. As this is highly       individual, this cookiecutter could not do this for you.     * Add more dependencies in analogy to <code>{{ cookiecutter.external_dependency }}</code>     * Make dependencies requirements by adding <code>REQUIRED</code> to <code>find_package()</code>     * Add version constraints to dependencies by adding <code>VERSION</code> to <code>find_package()</code>     * Make a dependency a pure build time dependency by removing it from <code>{{ cookiecutter.project_slug }}Config.cmake.in</code> {%- endif %} {%- if cookiecutter.gitlab_ci == \"Yes\" %} * Make sure that CI/CD pipelines are enabled in your Gitlab project settings and that   there is a suitable Runner available. If you are using the cloud-hosted gitlab.com,   this should already be taken care of. {%- endif %} {%- if cookiecutter.readthedocs == \"Yes\" %} * Enable the integration of Readthedocs with your Git hoster. In the case of Github, this means   that you need to login at Read the Docs and click the button   Import a Project. {%- endif %} {%- if cookiecutter.doxygen == \"Yes\" %} * Make sure that doxygen is installed on your system, e.g. by doing <code>sudo apt install doxygen</code>   on Debian or Ubuntu. {%- endif %} {%- if cookiecutter.python_bindings == \"Yes\" %} * Edit the parameters of <code>pyproject.toml</code> file to contain the necessary information   about your project, such as your email adress, PyPI classifiers and a short project description. {%- endif %} {%- if cookiecutter.pypi_release == \"Yes\" %} * Head to your user settings at <code>https://pypi.org</code> and <code>https://test.pypi.org/</code> to setup PyPI trusted publishing.   In order to do so, you have to head to the \"Publishing\" tab, scroll to the bottom   and add a \"new pending publisher\". The relevant information is:   * PyPI project name: <code>{{ cookiecutter|modname }}</code>   * Owner: <code>{{ cookiecutter|username }}</code>   * Repository name: <code>{{ cookiecutter|remote_slug }}</code>   * Workflow name: <code>pypi.yml</code>   * Environment name: not required {%- endif %} {%- if cookiecutter.codecovio == \"Yes\" %} * Enable the integration with <code>codecov.io</code> by heading to the Codecov.io Website,   log in (e.g. with your Github credentials) and enable integration for your repository. In order to do   so, you need to select it from the list of repositories (potentially re-syncing with GitHub). Then, head   to the \"Settings\" Tab and select \"Global Upload Token\". Here, you should select the \"not required\" option.</p>"},{"location":"twin-repos/cookiecutter-python-package/","title":"Welcome to Python Package Cookiecutter!","text":"<p>This repository is a template repository (a cookiecutter) that allows you to quickly set up new Python packages. It is geared towards scientific applications and implements the best practice guidelines of the Scientific Software Center of Heidelberg University.</p>"},{"location":"twin-repos/cookiecutter-python-package/#features","title":"Features","text":"<ul> <li>Very simple, configurable setup of a fully functional project</li> <li>Modern build system metadata specification using <code>pyproject.toml</code> (PEP517 + PEP621)</li> <li>Based on an established tool: Cookiecutter has &gt;17k stars on Github!</li> <li>Package versioning integrated with Git repository using <code>setuptools_scm</code></li> <li>CI/CD configurations using Github Actions or Gitlab CI</li> <li>Sphinx documentation deployed to readthedocs.org</li> </ul> <p>If your Python package contains compiled C++ modules, you might want to check out our C++ Cookiecutter with Pybind11 bindings instead.</p>"},{"location":"twin-repos/cookiecutter-python-package/#prerequisites","title":"Prerequisites","text":"<p>In order to use Python Package Cookiecutter you need the following software installed:</p> <ul> <li>Python <code>&gt;= 3.8</code></li> <li>Cookiecutter e.g. by doing <code>pip install cookiecutter</code>.</li> <li>Git <code>&gt;= 1.8.2</code></li> </ul>"},{"location":"twin-repos/cookiecutter-python-package/#using-the-python-package-cookiecutter","title":"Using the Python Package Cookiecutter","text":"<p>Simply run the cookiecutter command line interface:</p> <pre><code>cookiecutter gh:ssciwr/cookiecutter-python-package\n</code></pre> <p>This will start an interactive prompt that will configure and generate your project. One of the prompts will ask you for a remote repository URL, so you should head to the Git hosting service of your choice and add a new empty repository e.g. on Github.</p>"},{"location":"twin-repos/cookiecutter-python-package/#configuration","title":"Configuration","text":"<p>This cookiecutter accepts the following configuration options:</p> <ul> <li><code>project_name</code>: The human-readable name of the project, defaults to <code>My Project</code></li> <li><code>remote_url</code>: The remote URL for the newly created repository. This is not only used   to add it as a remote to the Git repository, but also to enable integration with some   services. Defaults to <code>None</code> although we strongly advise you to specify it.</li> <li><code>project_slug</code>: This will be the name of the generated directory.By default, it is deduced from the specified remote URL and the given project name.</li> <li><code>full_name</code>: Author name, defaults to <code>Your Name</code></li> <li><code>license</code> adds a license file to the repository. It can be chosen from MIT (default), BSD-2, GPL-3.0, LGPL-3.0 or it can be omitted.</li> <li><code>github_actions_ci</code>: Whether to add CI/CD workflows for Github Actions</li> <li><code>gitlab_ci</code>: Whether to add a CI workflow for GitLab CI</li> <li><code>notebooks</code>: Whether you want to use Jupyter Notebooks for documentation, demonstration   and testing purposes. Will automatically render an example notebook into your Sphinx   documentation and run it during test suite execution.</li> <li><code>commandlineinterface</code>: Whether the Package should have a CLI based on <code>click</code>.</li> </ul> <p>If you are using <code>cookiecutter-python-package</code> a lot, you can customize your default values by providing a <code>.cookiecutterrc</code> file in your home directory, for more details see the cookiecutter documentation.</p>"},{"location":"twin-repos/cookiecutter-python-package/#issues","title":"Issues","text":"<p>Please report any issues you might have with template using the Github issue tracker</p>"},{"location":"twin-repos/cookiecutter-python-package/COPYING/","title":"COPYING","text":"<p>This is the list of copyright holders of cookiecutter-python-project. For information on the license, see LICENSE.md.</p> <ul> <li>Dominic Kempf, 2022</li> </ul>"},{"location":"twin-repos/cookiecutter-python-package/LICENSE/","title":"LICENSE","text":"<p>Copyright 2020, The copyright holders according to COPYING.md</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"twin-repos/cookiecutter-python-package/%7B%7Bcookiecutter.project_slug%7D%7D/","title":"Welcome to {{ cookiecutter.project_name }}","text":"<p>{# The white-space control of the below template is quite delicate - if you add one, do it exactly like this (mind the -'s) -#} {% if cookiecutter.license == \"MIT\" -%}  {% endif -%} {% if cookiecutter.license == \"BSD-2\" -%}  {% endif -%} {% if cookiecutter.license == \"GPL-3.0\" -%}  {% endif -%} {% if cookiecutter.license == \"LGPL-3.0\" -%}  {% endif -%} {% if cookiecutter.remote_url != \"None\" -%} {% if cookiecutter.github_actions_ci == \"Yes\" and cookiecutter|is_github -%}  {% endif -%} {% if cookiecutter.gitlab_ci == \"Yes\" and cookiecutter|is_gitlab -%}  {% endif -%} {% endif -%}   {{ \"\\n\" -}}</p>"},{"location":"twin-repos/cookiecutter-python-package/%7B%7Bcookiecutter.project_slug%7D%7D/#installation","title":"Installation","text":"<p>The Python package <code>{{ cookiecutter|modname }}</code> can be installed from PyPI:</p> <pre><code>python -m pip install {{ cookiecutter|modname }}\n</code></pre>"},{"location":"twin-repos/cookiecutter-python-package/%7B%7Bcookiecutter.project_slug%7D%7D/#development-installation","title":"Development installation","text":"<p>If you want to contribute to the development of <code>{{ cookiecutter|modname }}</code>, we recommend the following editable installation from this repository:</p> <pre><code>{%- if cookiecutter.remote_url != \"None\" %}\ngit clone {{ cookiecutter.remote_url }}\ncd {{ cookiecutter.project_slug }}\n{%- endif %}\npython -m pip install --editable .[tests]\n</code></pre> <p>Having done so, the test suite can be run using <code>pytest</code>:</p> <pre><code>python -m pytest\n</code></pre>"},{"location":"twin-repos/cookiecutter-python-package/%7B%7Bcookiecutter.project_slug%7D%7D/#acknowledgments","title":"Acknowledgments","text":"<p>This repository was set up using the SSC Cookiecutter for Python Packages.</p>"},{"location":"twin-repos/cookiecutter-python-package/%7B%7Bcookiecutter.project_slug%7D%7D/COPYING/","title":"COPYING","text":"<p>This is the list of copyright holders of {{ cookiecutter.project_name }}. {% if cookiecutter.license != \"None\" %} For information on the license, see LICENSE.md.</p> <ul> <li>{{ cookiecutter.full_name }}, {{ current_year }}</li> </ul>"},{"location":"twin-repos/cookiecutter-python-package/%7B%7Bcookiecutter.project_slug%7D%7D/FILESTRUCTURE/","title":"FILESTRUCTURE","text":"<p>This is an explanation of the file structure that the cookiecutter generated for you:</p> <ul> <li>Python source files:</li> <li>The Python package source files are located in the <code>{{ cookiecutter|modname }}</code> directory.</li> <li>The file <code>{{ cookiecutter|modname }}.__main__.py</code> defines a command line interface that     is accessible both as the command <code>{{ cookiecutter|modname }}</code> and via     <code>python -m {{ cookiecutter|modname }}</code>.</li> <li><code>tests/test_cli.py</code> contains rudimentary testing of this CLI.</li> <li><code>tests/test_{{ cookiecutter|modname }}.py</code> contains the unit tests for the package.</li> <li><code>tests/conftest.py</code> contains testing setup and configuration for <code>pytest</code></li> <li>The <code>notebooks</code> directory contains an example Jupyter notebook on how to use <code>{{ cookiecutter|modname }}</code>.     This notebook is always executed during <code>pytest</code> execution and it is automatically     rendered into the Sphinx documentation.</li> <li>Markdown files with meta information on the project. Markdown is   a good language for these files, as it is easy to write and rendered into something beautiful by your git repository   hosting provider.</li> <li><code>README.md</code> is the file that users will typically see first when discovering your project.</li> <li><code>COPYING.md</code> provides a list of copyright holders.</li> <li><code>LICENSE.md</code> contains the license you selected.</li> <li><code>TODO.md</code> contains a list of TODOs after running the cookiecutter. Following the     instructions in that file will give you a fully functional repository with a lot     of integration into useful web services activated and running.</li> <li><code>FILESTRUCTURE.md</code> describes the generated files. Feel free to remove this from the     repository if you do not need it.</li> <li>Python build system files</li> <li><code>pyproject.toml</code> is the central place for configuration of your Python package.     It contains the project metadata, setuptools-specific information and the configuration     for your toolchain (like e.g. <code>pytest</code>).</li> <li><code>setup.py</code> is still required for editable builds, but you should not need to change it.     In the future, <code>setuptools</code> will support editable builds purely from <code>pyproject.toml</code>     configuration.</li> <li>Configuration for CI/Code Analysis and documentation services</li> <li><code>.github/workflows/ci.yml</code> describes the Github Workflow for Continuous     integration. For further reading on workflow files, we recommend the     introduction into Github Actions     and the reference of available options.</li> <li><code>.github/dependabot.yml</code> configures the DependaBot integration on GitHub that     allows you to automatically create pull requests for updates of the used actions     in <code>.github/workflows/ci.yml</code>. {%- endif %}</li> <li><code>.gitlab-ci.yml</code> describes the configuration for Gitlab CI. For further     reading, we recommend Gitlabs quick start guide     and the Gitlab CI configuration reference {%- endif %}</li> <li><code>.pre-commit-config.yaml</code> contains a configuration for the pre-commit     tool. It was added because the <code>pre-commit</code> tool was found in your Python environment.</li> <li><code>.readthedocs.yml</code> configures the documentation build process at ReadTheDocs.     To customize your build, you can have a look at the available options.</li> </ul>"},{"location":"twin-repos/cookiecutter-python-package/%7B%7Bcookiecutter.project_slug%7D%7D/LICENSE/","title":"LICENSE","text":"<p>Copyright {{ current_year }}, The copyright holders according to COPYING.md</p> <p>{% if cookiecutter.license == \"MIT\" %} Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. {% endif %} {% if cookiecutter.license == \"BSD-2\" %} Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:</p> <ol> <li> <p>Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.</p> </li> <li> <p>Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.</p> </li> </ol> <p>THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. {% endif %}</p>"},{"location":"twin-repos/cookiecutter-python-package/%7B%7Bcookiecutter.project_slug%7D%7D/LICENSE/#gnu-general-public-license","title":"GNU GENERAL PUBLIC LICENSE","text":"<p>Version 3, 29 June 2007</p> <p>Copyright (C) 2007 Free Software Foundation, Inc. https://fsf.org/</p> <p>Everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed.</p>"},{"location":"twin-repos/cookiecutter-python-package/%7B%7Bcookiecutter.project_slug%7D%7D/LICENSE/#preamble","title":"Preamble","text":"<p>The GNU General Public License is a free, copyleft license for software and other kinds of works.</p> <p>The licenses for most software and other practical works are designed to take away your freedom to share and change the works. By contrast, the GNU General Public License is intended to guarantee your freedom to share and change all versions of a program--to make sure it remains free software for all its users. We, the Free Software Foundation, use the GNU General Public License for most of our software; it applies also to any other work released this way by its authors. You can apply it to your programs, too.</p> <p>When we speak of free software, we are referring to freedom, not price. Our General Public Licenses are designed to make sure that you have the freedom to distribute copies of free software (and charge for them if you wish), that you receive source code or can get it if you want it, that you can change the software or use pieces of it in new free programs, and that you know you can do these things.</p> <p>To protect your rights, we need to prevent others from denying you these rights or asking you to surrender the rights. Therefore, you have certain responsibilities if you distribute copies of the software, or if you modify it: responsibilities to respect the freedom of others.</p> <p>For example, if you distribute copies of such a program, whether gratis or for a fee, you must pass on to the recipients the same freedoms that you received. You must make sure that they, too, receive or can get the source code. And you must show them these terms so they know their rights.</p> <p>Developers that use the GNU GPL protect your rights with two steps: (1) assert copyright on the software, and (2) offer you this License giving you legal permission to copy, distribute and/or modify it.</p> <p>For the developers' and authors' protection, the GPL clearly explains that there is no warranty for this free software. For both users' and authors' sake, the GPL requires that modified versions be marked as changed, so that their problems will not be attributed erroneously to authors of previous versions.</p> <p>Some devices are designed to deny users access to install or run modified versions of the software inside them, although the manufacturer can do so. This is fundamentally incompatible with the aim of protecting users' freedom to change the software. The systematic pattern of such abuse occurs in the area of products for individuals to use, which is precisely where it is most unacceptable. Therefore, we have designed this version of the GPL to prohibit the practice for those products. If such problems arise substantially in other domains, we stand ready to extend this provision to those domains in future versions of the GPL, as needed to protect the freedom of users.</p> <p>Finally, every program is threatened constantly by software patents. States should not allow patents to restrict development and use of software on general-purpose computers, but in those that do, we wish to avoid the special danger that patents applied to a free program could make it effectively proprietary. To prevent this, the GPL assures that patents cannot be used to render the program non-free.</p> <p>The precise terms and conditions for copying, distribution and modification follow.</p>"},{"location":"twin-repos/cookiecutter-python-package/%7B%7Bcookiecutter.project_slug%7D%7D/LICENSE/#terms-and-conditions","title":"TERMS AND CONDITIONS","text":""},{"location":"twin-repos/cookiecutter-python-package/%7B%7Bcookiecutter.project_slug%7D%7D/LICENSE/#0-definitions","title":"0. Definitions.","text":"<p>\"This License\" refers to version 3 of the GNU General Public License.</p> <p>\"Copyright\" also means copyright-like laws that apply to other kinds of works, such as semiconductor masks.</p> <p>\"The Program\" refers to any copyrightable work licensed under this License. Each licensee is addressed as \"you\". \"Licensees\" and \"recipients\" may be individuals or organizations.</p> <p>To \"modify\" a work means to copy from or adapt all or part of the work in a fashion requiring copyright permission, other than the making of an exact copy. The resulting work is called a \"modified version\" of the earlier work or a work \"based on\" the earlier work.</p> <p>A \"covered work\" means either the unmodified Program or a work based on the Program.</p> <p>To \"propagate\" a work means to do anything with it that, without permission, would make you directly or secondarily liable for infringement under applicable copyright law, except executing it on a computer or modifying a private copy. Propagation includes copying, distribution (with or without modification), making available to the public, and in some countries other activities as well.</p> <p>To \"convey\" a work means any kind of propagation that enables other parties to make or receive copies. Mere interaction with a user through a computer network, with no transfer of a copy, is not conveying.</p> <p>An interactive user interface displays \"Appropriate Legal Notices\" to the extent that it includes a convenient and prominently visible feature that (1) displays an appropriate copyright notice, and (2) tells the user that there is no warranty for the work (except to the extent that warranties are provided), that licensees may convey the work under this License, and how to view a copy of this License. If the interface presents a list of user commands or options, such as a menu, a prominent item in the list meets this criterion.</p>"},{"location":"twin-repos/cookiecutter-python-package/%7B%7Bcookiecutter.project_slug%7D%7D/LICENSE/#1-source-code","title":"1. Source Code.","text":"<p>The \"source code\" for a work means the preferred form of the work for making modifications to it. \"Object code\" means any non-source form of a work.</p> <p>A \"Standard Interface\" means an interface that either is an official standard defined by a recognized standards body, or, in the case of interfaces specified for a particular programming language, one that is widely used among developers working in that language.</p> <p>The \"System Libraries\" of an executable work include anything, other than the work as a whole, that (a) is included in the normal form of packaging a Major Component, but which is not part of that Major Component, and (b) serves only to enable use of the work with that Major Component, or to implement a Standard Interface for which an implementation is available to the public in source code form. A \"Major Component\", in this context, means a major essential component (kernel, window system, and so on) of the specific operating system (if any) on which the executable work runs, or a compiler used to produce the work, or an object code interpreter used to run it.</p> <p>The \"Corresponding Source\" for a work in object code form means all the source code needed to generate, install, and (for an executable work) run the object code and to modify the work, including scripts to control those activities. However, it does not include the work's System Libraries, or general-purpose tools or generally available free programs which are used unmodified in performing those activities but which are not part of the work. For example, Corresponding Source includes interface definition files associated with source files for the work, and the source code for shared libraries and dynamically linked subprograms that the work is specifically designed to require, such as by intimate data communication or control flow between those subprograms and other parts of the work.</p> <p>The Corresponding Source need not include anything that users can regenerate automatically from other parts of the Corresponding Source.</p> <p>The Corresponding Source for a work in source code form is that same work.</p>"},{"location":"twin-repos/cookiecutter-python-package/%7B%7Bcookiecutter.project_slug%7D%7D/LICENSE/#2-basic-permissions","title":"2. Basic Permissions.","text":"<p>All rights granted under this License are granted for the term of copyright on the Program, and are irrevocable provided the stated conditions are met. This License explicitly affirms your unlimited permission to run the unmodified Program. The output from running a covered work is covered by this License only if the output, given its content, constitutes a covered work. This License acknowledges your rights of fair use or other equivalent, as provided by copyright law.</p> <p>You may make, run and propagate covered works that you do not convey, without conditions so long as your license otherwise remains in force. You may convey covered works to others for the sole purpose of having them make modifications exclusively for you, or provide you with facilities for running those works, provided that you comply with the terms of this License in conveying all material for which you do not control copyright. Those thus making or running the covered works for you must do so exclusively on your behalf, under your direction and control, on terms that prohibit them from making any copies of your copyrighted material outside their relationship with you.</p> <p>Conveying under any other circumstances is permitted solely under the conditions stated below. Sublicensing is not allowed; section 10 makes it unnecessary.</p>"},{"location":"twin-repos/cookiecutter-python-package/%7B%7Bcookiecutter.project_slug%7D%7D/LICENSE/#3-protecting-users-legal-rights-from-anti-circumvention-law","title":"3. Protecting Users' Legal Rights From Anti-Circumvention Law.","text":"<p>No covered work shall be deemed part of an effective technological measure under any applicable law fulfilling obligations under article 11 of the WIPO copyright treaty adopted on 20 December 1996, or similar laws prohibiting or restricting circumvention of such measures.</p> <p>When you convey a covered work, you waive any legal power to forbid circumvention of technological measures to the extent such circumvention is effected by exercising rights under this License with respect to the covered work, and you disclaim any intention to limit operation or modification of the work as a means of enforcing, against the work's users, your or third parties' legal rights to forbid circumvention of technological measures.</p>"},{"location":"twin-repos/cookiecutter-python-package/%7B%7Bcookiecutter.project_slug%7D%7D/LICENSE/#4-conveying-verbatim-copies","title":"4. Conveying Verbatim Copies.","text":"<p>You may convey verbatim copies of the Program's source code as you receive it, in any medium, provided that you conspicuously and appropriately publish on each copy an appropriate copyright notice; keep intact all notices stating that this License and any non-permissive terms added in accord with section 7 apply to the code; keep intact all notices of the absence of any warranty; and give all recipients a copy of this License along with the Program.</p> <p>You may charge any price or no price for each copy that you convey, and you may offer support or warranty protection for a fee.</p>"},{"location":"twin-repos/cookiecutter-python-package/%7B%7Bcookiecutter.project_slug%7D%7D/LICENSE/#5-conveying-modified-source-versions","title":"5. Conveying Modified Source Versions.","text":"<p>You may convey a work based on the Program, or the modifications to produce it from the Program, in the form of source code under the terms of section 4, provided that you also meet all of these conditions:</p> <ul> <li>a) The work must carry prominent notices stating that you modified     it, and giving a relevant date.</li> <li>b) The work must carry prominent notices stating that it is     released under this License and any conditions added under     section 7. This requirement modifies the requirement in section 4     to \"keep intact all notices\".</li> <li>c) You must license the entire work, as a whole, under this     License to anyone who comes into possession of a copy. This     License will therefore apply, along with any applicable section 7     additional terms, to the whole of the work, and all its parts,     regardless of how they are packaged. This License gives no     permission to license the work in any other way, but it does not     invalidate such permission if you have separately received it.</li> <li>d) If the work has interactive user interfaces, each must display     Appropriate Legal Notices; however, if the Program has interactive     interfaces that do not display Appropriate Legal Notices, your     work need not make them do so.</li> </ul> <p>A compilation of a covered work with other separate and independent works, which are not by their nature extensions of the covered work, and which are not combined with it such as to form a larger program, in or on a volume of a storage or distribution medium, is called an \"aggregate\" if the compilation and its resulting copyright are not used to limit the access or legal rights of the compilation's users beyond what the individual works permit. Inclusion of a covered work in an aggregate does not cause this License to apply to the other parts of the aggregate.</p>"},{"location":"twin-repos/cookiecutter-python-package/%7B%7Bcookiecutter.project_slug%7D%7D/LICENSE/#6-conveying-non-source-forms","title":"6. Conveying Non-Source Forms.","text":"<p>You may convey a covered work in object code form under the terms of sections 4 and 5, provided that you also convey the machine-readable Corresponding Source under the terms of this License, in one of these ways:</p> <ul> <li>a) Convey the object code in, or embodied in, a physical product     (including a physical distribution medium), accompanied by the     Corresponding Source fixed on a durable physical medium     customarily used for software interchange.</li> <li>b) Convey the object code in, or embodied in, a physical product     (including a physical distribution medium), accompanied by a     written offer, valid for at least three years and valid for as     long as you offer spare parts or customer support for that product     model, to give anyone who possesses the object code either (1) a     copy of the Corresponding Source for all the software in the     product that is covered by this License, on a durable physical     medium customarily used for software interchange, for a price no     more than your reasonable cost of physically performing this     conveying of source, or (2) access to copy the Corresponding     Source from a network server at no charge.</li> <li>c) Convey individual copies of the object code with a copy of the     written offer to provide the Corresponding Source. This     alternative is allowed only occasionally and noncommercially, and     only if you received the object code with such an offer, in accord     with subsection 6b.</li> <li>d) Convey the object code by offering access from a designated     place (gratis or for a charge), and offer equivalent access to the     Corresponding Source in the same way through the same place at no     further charge. You need not require recipients to copy the     Corresponding Source along with the object code. If the place to     copy the object code is a network server, the Corresponding Source     may be on a different server (operated by you or a third party)     that supports equivalent copying facilities, provided you maintain     clear directions next to the object code saying where to find the     Corresponding Source. Regardless of what server hosts the     Corresponding Source, you remain obligated to ensure that it is     available for as long as needed to satisfy these requirements.</li> <li>e) Convey the object code using peer-to-peer transmission,     provided you inform other peers where the object code and     Corresponding Source of the work are being offered to the general     public at no charge under subsection 6d.</li> </ul> <p>A separable portion of the object code, whose source code is excluded from the Corresponding Source as a System Library, need not be included in conveying the object code work.</p> <p>A \"User Product\" is either (1) a \"consumer product\", which means any tangible personal property which is normally used for personal, family, or household purposes, or (2) anything designed or sold for incorporation into a dwelling. In determining whether a product is a consumer product, doubtful cases shall be resolved in favor of coverage. For a particular product received by a particular user, \"normally used\" refers to a typical or common use of that class of product, regardless of the status of the particular user or of the way in which the particular user actually uses, or expects or is expected to use, the product. A product is a consumer product regardless of whether the product has substantial commercial, industrial or non-consumer uses, unless such uses represent the only significant mode of use of the product.</p> <p>\"Installation Information\" for a User Product means any methods, procedures, authorization keys, or other information required to install and execute modified versions of a covered work in that User Product from a modified version of its Corresponding Source. The information must suffice to ensure that the continued functioning of the modified object code is in no case prevented or interfered with solely because modification has been made.</p> <p>If you convey an object code work under this section in, or with, or specifically for use in, a User Product, and the conveying occurs as part of a transaction in which the right of possession and use of the User Product is transferred to the recipient in perpetuity or for a fixed term (regardless of how the transaction is characterized), the Corresponding Source conveyed under this section must be accompanied by the Installation Information. But this requirement does not apply if neither you nor any third party retains the ability to install modified object code on the User Product (for example, the work has been installed in ROM).</p> <p>The requirement to provide Installation Information does not include a requirement to continue to provide support service, warranty, or updates for a work that has been modified or installed by the recipient, or for the User Product in which it has been modified or installed. Access to a network may be denied when the modification itself materially and adversely affects the operation of the network or violates the rules and protocols for communication across the network.</p> <p>Corresponding Source conveyed, and Installation Information provided, in accord with this section must be in a format that is publicly documented (and with an implementation available to the public in source code form), and must require no special password or key for unpacking, reading or copying.</p>"},{"location":"twin-repos/cookiecutter-python-package/%7B%7Bcookiecutter.project_slug%7D%7D/LICENSE/#7-additional-terms","title":"7. Additional Terms.","text":"<p>\"Additional permissions\" are terms that supplement the terms of this License by making exceptions from one or more of its conditions. Additional permissions that are applicable to the entire Program shall be treated as though they were included in this License, to the extent that they are valid under applicable law. If additional permissions apply only to part of the Program, that part may be used separately under those permissions, but the entire Program remains governed by this License without regard to the additional permissions.</p> <p>When you convey a copy of a covered work, you may at your option remove any additional permissions from that copy, or from any part of it. (Additional permissions may be written to require their own removal in certain cases when you modify the work.) You may place additional permissions on material, added by you to a covered work, for which you have or can give appropriate copyright permission.</p> <p>Notwithstanding any other provision of this License, for material you add to a covered work, you may (if authorized by the copyright holders of that material) supplement the terms of this License with terms:</p> <ul> <li>a) Disclaiming warranty or limiting liability differently from the     terms of sections 15 and 16 of this License; or</li> <li>b) Requiring preservation of specified reasonable legal notices or     author attributions in that material or in the Appropriate Legal     Notices displayed by works containing it; or</li> <li>c) Prohibiting misrepresentation of the origin of that material,     or requiring that modified versions of such material be marked in     reasonable ways as different from the original version; or</li> <li>d) Limiting the use for publicity purposes of names of licensors     or authors of the material; or</li> <li>e) Declining to grant rights under trademark law for use of some     trade names, trademarks, or service marks; or</li> <li>f) Requiring indemnification of licensors and authors of that     material by anyone who conveys the material (or modified versions     of it) with contractual assumptions of liability to the recipient,     for any liability that these contractual assumptions directly     impose on those licensors and authors.</li> </ul> <p>All other non-permissive additional terms are considered \"further restrictions\" within the meaning of section 10. If the Program as you received it, or any part of it, contains a notice stating that it is governed by this License along with a term that is a further restriction, you may remove that term. If a license document contains a further restriction but permits relicensing or conveying under this License, you may add to a covered work material governed by the terms of that license document, provided that the further restriction does not survive such relicensing or conveying.</p> <p>If you add terms to a covered work in accord with this section, you must place, in the relevant source files, a statement of the additional terms that apply to those files, or a notice indicating where to find the applicable terms.</p> <p>Additional terms, permissive or non-permissive, may be stated in the form of a separately written license, or stated as exceptions; the above requirements apply either way.</p>"},{"location":"twin-repos/cookiecutter-python-package/%7B%7Bcookiecutter.project_slug%7D%7D/LICENSE/#8-termination","title":"8. Termination.","text":"<p>You may not propagate or modify a covered work except as expressly provided under this License. Any attempt otherwise to propagate or modify it is void, and will automatically terminate your rights under this License (including any patent licenses granted under the third paragraph of section 11).</p> <p>However, if you cease all violation of this License, then your license from a particular copyright holder is reinstated (a) provisionally, unless and until the copyright holder explicitly and finally terminates your license, and (b) permanently, if the copyright holder fails to notify you of the violation by some reasonable means prior to 60 days after the cessation.</p> <p>Moreover, your license from a particular copyright holder is reinstated permanently if the copyright holder notifies you of the violation by some reasonable means, this is the first time you have received notice of violation of this License (for any work) from that copyright holder, and you cure the violation prior to 30 days after your receipt of the notice.</p> <p>Termination of your rights under this section does not terminate the licenses of parties who have received copies or rights from you under this License. If your rights have been terminated and not permanently reinstated, you do not qualify to receive new licenses for the same material under section 10.</p>"},{"location":"twin-repos/cookiecutter-python-package/%7B%7Bcookiecutter.project_slug%7D%7D/LICENSE/#9-acceptance-not-required-for-having-copies","title":"9. Acceptance Not Required for Having Copies.","text":"<p>You are not required to accept this License in order to receive or run a copy of the Program. Ancillary propagation of a covered work occurring solely as a consequence of using peer-to-peer transmission to receive a copy likewise does not require acceptance. However, nothing other than this License grants you permission to propagate or modify any covered work. These actions infringe copyright if you do not accept this License. Therefore, by modifying or propagating a covered work, you indicate your acceptance of this License to do so.</p>"},{"location":"twin-repos/cookiecutter-python-package/%7B%7Bcookiecutter.project_slug%7D%7D/LICENSE/#10-automatic-licensing-of-downstream-recipients","title":"10. Automatic Licensing of Downstream Recipients.","text":"<p>Each time you convey a covered work, the recipient automatically receives a license from the original licensors, to run, modify and propagate that work, subject to this License. You are not responsible for enforcing compliance by third parties with this License.</p> <p>An \"entity transaction\" is a transaction transferring control of an organization, or substantially all assets of one, or subdividing an organization, or merging organizations. If propagation of a covered work results from an entity transaction, each party to that transaction who receives a copy of the work also receives whatever licenses to the work the party's predecessor in interest had or could give under the previous paragraph, plus a right to possession of the Corresponding Source of the work from the predecessor in interest, if the predecessor has it or can get it with reasonable efforts.</p> <p>You may not impose any further restrictions on the exercise of the rights granted or affirmed under this License. For example, you may not impose a license fee, royalty, or other charge for exercise of rights granted under this License, and you may not initiate litigation (including a cross-claim or counterclaim in a lawsuit) alleging that any patent claim is infringed by making, using, selling, offering for sale, or importing the Program or any portion of it.</p>"},{"location":"twin-repos/cookiecutter-python-package/%7B%7Bcookiecutter.project_slug%7D%7D/LICENSE/#11-patents","title":"11. Patents.","text":"<p>A \"contributor\" is a copyright holder who authorizes use under this License of the Program or a work on which the Program is based. The work thus licensed is called the contributor's \"contributor version\".</p> <p>A contributor's \"essential patent claims\" are all patent claims owned or controlled by the contributor, whether already acquired or hereafter acquired, that would be infringed by some manner, permitted by this License, of making, using, or selling its contributor version, but do not include claims that would be infringed only as a consequence of further modification of the contributor version. For purposes of this definition, \"control\" includes the right to grant patent sublicenses in a manner consistent with the requirements of this License.</p> <p>Each contributor grants you a non-exclusive, worldwide, royalty-free patent license under the contributor's essential patent claims, to make, use, sell, offer for sale, import and otherwise run, modify and propagate the contents of its contributor version.</p> <p>In the following three paragraphs, a \"patent license\" is any express agreement or commitment, however denominated, not to enforce a patent (such as an express permission to practice a patent or covenant not to sue for patent infringement). To \"grant\" such a patent license to a party means to make such an agreement or commitment not to enforce a patent against the party.</p> <p>If you convey a covered work, knowingly relying on a patent license, and the Corresponding Source of the work is not available for anyone to copy, free of charge and under the terms of this License, through a publicly available network server or other readily accessible means, then you must either (1) cause the Corresponding Source to be so available, or (2) arrange to deprive yourself of the benefit of the patent license for this particular work, or (3) arrange, in a manner consistent with the requirements of this License, to extend the patent license to downstream recipients. \"Knowingly relying\" means you have actual knowledge that, but for the patent license, your conveying the covered work in a country, or your recipient's use of the covered work in a country, would infringe one or more identifiable patents in that country that you have reason to believe are valid.</p> <p>If, pursuant to or in connection with a single transaction or arrangement, you convey, or propagate by procuring conveyance of, a covered work, and grant a patent license to some of the parties receiving the covered work authorizing them to use, propagate, modify or convey a specific copy of the covered work, then the patent license you grant is automatically extended to all recipients of the covered work and works based on it.</p> <p>A patent license is \"discriminatory\" if it does not include within the scope of its coverage, prohibits the exercise of, or is conditioned on the non-exercise of one or more of the rights that are specifically granted under this License. You may not convey a covered work if you are a party to an arrangement with a third party that is in the business of distributing software, under which you make payment to the third party based on the extent of your activity of conveying the work, and under which the third party grants, to any of the parties who would receive the covered work from you, a discriminatory patent license (a) in connection with copies of the covered work conveyed by you (or copies made from those copies), or (b) primarily for and in connection with specific products or compilations that contain the covered work, unless you entered into that arrangement, or that patent license was granted, prior to 28 March 2007.</p> <p>Nothing in this License shall be construed as excluding or limiting any implied license or other defenses to infringement that may otherwise be available to you under applicable patent law.</p>"},{"location":"twin-repos/cookiecutter-python-package/%7B%7Bcookiecutter.project_slug%7D%7D/LICENSE/#12-no-surrender-of-others-freedom","title":"12. No Surrender of Others' Freedom.","text":"<p>If conditions are imposed on you (whether by court order, agreement or otherwise) that contradict the conditions of this License, they do not excuse you from the conditions of this License. If you cannot convey a covered work so as to satisfy simultaneously your obligations under this License and any other pertinent obligations, then as a consequence you may not convey it at all. For example, if you agree to terms that obligate you to collect a royalty for further conveying from those to whom you convey the Program, the only way you could satisfy both those terms and this License would be to refrain entirely from conveying the Program.</p>"},{"location":"twin-repos/cookiecutter-python-package/%7B%7Bcookiecutter.project_slug%7D%7D/LICENSE/#13-use-with-the-gnu-affero-general-public-license","title":"13. Use with the GNU Affero General Public License.","text":"<p>Notwithstanding any other provision of this License, you have permission to link or combine any covered work with a work licensed under version 3 of the GNU Affero General Public License into a single combined work, and to convey the resulting work. The terms of this License will continue to apply to the part which is the covered work, but the special requirements of the GNU Affero General Public License, section 13, concerning interaction through a network will apply to the combination as such.</p>"},{"location":"twin-repos/cookiecutter-python-package/%7B%7Bcookiecutter.project_slug%7D%7D/LICENSE/#14-revised-versions-of-this-license","title":"14. Revised Versions of this License.","text":"<p>The Free Software Foundation may publish revised and/or new versions of the GNU General Public License from time to time. Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns.</p> <p>Each version is given a distinguishing version number. If the Program specifies that a certain numbered version of the GNU General Public License \"or any later version\" applies to it, you have the option of following the terms and conditions either of that numbered version or of any later version published by the Free Software Foundation. If the Program does not specify a version number of the GNU General Public License, you may choose any version ever published by the Free Software Foundation.</p> <p>If the Program specifies that a proxy can decide which future versions of the GNU General Public License can be used, that proxy's public statement of acceptance of a version permanently authorizes you to choose that version for the Program.</p> <p>Later license versions may give you additional or different permissions. However, no additional obligations are imposed on any author or copyright holder as a result of your choosing to follow a later version.</p>"},{"location":"twin-repos/cookiecutter-python-package/%7B%7Bcookiecutter.project_slug%7D%7D/LICENSE/#15-disclaimer-of-warranty","title":"15. Disclaimer of Warranty.","text":"<p>THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.</p>"},{"location":"twin-repos/cookiecutter-python-package/%7B%7Bcookiecutter.project_slug%7D%7D/LICENSE/#16-limitation-of-liability","title":"16. Limitation of Liability.","text":"<p>IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.</p>"},{"location":"twin-repos/cookiecutter-python-package/%7B%7Bcookiecutter.project_slug%7D%7D/LICENSE/#17-interpretation-of-sections-15-and-16","title":"17. Interpretation of Sections 15 and 16.","text":"<p>If the disclaimer of warranty and limitation of liability provided above cannot be given local legal effect according to their terms, reviewing courts shall apply local law that most closely approximates an absolute waiver of all civil liability in connection with the Program, unless a warranty or assumption of liability accompanies a copy of the Program in return for a fee.</p> <p>END OF TERMS AND CONDITIONS</p>"},{"location":"twin-repos/cookiecutter-python-package/%7B%7Bcookiecutter.project_slug%7D%7D/LICENSE/#how-to-apply-these-terms-to-your-new-programs","title":"How to Apply These Terms to Your New Programs","text":"<p>If you develop a new program, and you want it to be of the greatest possible use to the public, the best way to achieve this is to make it free software which everyone can redistribute and change under these terms.</p> <p>To do so, attach the following notices to the program. It is safest to attach them to the start of each source file to most effectively state the exclusion of warranty; and each file should have at least the \"copyright\" line and a pointer to where the full notice is found.</p> <pre><code>    &lt;one line to give the program's name and a brief idea of what it does.&gt;\n    Copyright (C) &lt;year&gt;  &lt;name of author&gt;\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.\n</code></pre> <p>Also add information on how to contact you by electronic and paper mail.</p> <p>If the program does terminal interaction, make it output a short notice like this when it starts in an interactive mode:</p> <pre><code>    &lt;program&gt;  Copyright (C) &lt;year&gt;  &lt;name of author&gt;\n    This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n</code></pre> <p>The hypothetical commands `show w' and `show c' should show the appropriate parts of the General Public License. Of course, your program's commands might be different; for a GUI interface, you would use an \"about box\".</p> <p>You should also get your employer (if you work as a programmer) or school, if any, to sign a \"copyright disclaimer\" for the program, if necessary. For more information on this, and how to apply and follow the GNU GPL, see https://www.gnu.org/licenses/.</p> <p>The GNU General Public License does not permit incorporating your program into proprietary programs. If your program is a subroutine library, you may consider it more useful to permit linking proprietary applications with the library. If this is what you want to do, use the GNU Lesser General Public License instead of this License. But first, please read https://www.gnu.org/licenses/why-not-lgpl.html. {% endif %}</p>"},{"location":"twin-repos/cookiecutter-python-package/%7B%7Bcookiecutter.project_slug%7D%7D/LICENSE/#gnu-lesser-general-public-license","title":"GNU LESSER GENERAL PUBLIC LICENSE","text":"<p>Version 3, 29 June 2007</p> <p>Copyright (C) 2007 Free Software Foundation, Inc. https://fsf.org/</p> <p>Everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed.</p> <p>This version of the GNU Lesser General Public License incorporates the terms and conditions of version 3 of the GNU General Public License, supplemented by the additional permissions listed below.</p>"},{"location":"twin-repos/cookiecutter-python-package/%7B%7Bcookiecutter.project_slug%7D%7D/LICENSE/#0-additional-definitions","title":"0. Additional Definitions.","text":"<p>As used herein, \"this License\" refers to version 3 of the GNU Lesser General Public License, and the \"GNU GPL\" refers to version 3 of the GNU General Public License.</p> <p>\"The Library\" refers to a covered work governed by this License, other than an Application or a Combined Work as defined below.</p> <p>An \"Application\" is any work that makes use of an interface provided by the Library, but which is not otherwise based on the Library. Defining a subclass of a class defined by the Library is deemed a mode of using an interface provided by the Library.</p> <p>A \"Combined Work\" is a work produced by combining or linking an Application with the Library. The particular version of the Library with which the Combined Work was made is also called the \"Linked Version\".</p> <p>The \"Minimal Corresponding Source\" for a Combined Work means the Corresponding Source for the Combined Work, excluding any source code for portions of the Combined Work that, considered in isolation, are based on the Application, and not on the Linked Version.</p> <p>The \"Corresponding Application Code\" for a Combined Work means the object code and/or source code for the Application, including any data and utility programs needed for reproducing the Combined Work from the Application, but excluding the System Libraries of the Combined Work.</p>"},{"location":"twin-repos/cookiecutter-python-package/%7B%7Bcookiecutter.project_slug%7D%7D/LICENSE/#1-exception-to-section-3-of-the-gnu-gpl","title":"1. Exception to Section 3 of the GNU GPL.","text":"<p>You may convey a covered work under sections 3 and 4 of this License without being bound by section 3 of the GNU GPL.</p>"},{"location":"twin-repos/cookiecutter-python-package/%7B%7Bcookiecutter.project_slug%7D%7D/LICENSE/#2-conveying-modified-versions","title":"2. Conveying Modified Versions.","text":"<p>If you modify a copy of the Library, and, in your modifications, a facility refers to a function or data to be supplied by an Application that uses the facility (other than as an argument passed when the facility is invoked), then you may convey a copy of the modified version:</p> <ul> <li>a) under this License, provided that you make a good faith effort     to ensure that, in the event an Application does not supply the     function or data, the facility still operates, and performs     whatever part of its purpose remains meaningful, or</li> <li>b) under the GNU GPL, with none of the additional permissions of     this License applicable to that copy.</li> </ul>"},{"location":"twin-repos/cookiecutter-python-package/%7B%7Bcookiecutter.project_slug%7D%7D/LICENSE/#3-object-code-incorporating-material-from-library-header-files","title":"3. Object Code Incorporating Material from Library Header Files.","text":"<p>The object code form of an Application may incorporate material from a header file that is part of the Library. You may convey such object code under terms of your choice, provided that, if the incorporated material is not limited to numerical parameters, data structure layouts and accessors, or small macros, inline functions and templates (ten or fewer lines in length), you do both of the following:</p> <ul> <li>a) Give prominent notice with each copy of the object code that     the Library is used in it and that the Library and its use are     covered by this License.</li> <li>b) Accompany the object code with a copy of the GNU GPL and this     license document.</li> </ul>"},{"location":"twin-repos/cookiecutter-python-package/%7B%7Bcookiecutter.project_slug%7D%7D/LICENSE/#4-combined-works","title":"4. Combined Works.","text":"<p>You may convey a Combined Work under terms of your choice that, taken together, effectively do not restrict modification of the portions of the Library contained in the Combined Work and reverse engineering for debugging such modifications, if you also do each of the following:</p> <ul> <li>a) Give prominent notice with each copy of the Combined Work that     the Library is used in it and that the Library and its use are     covered by this License.</li> <li>b) Accompany the Combined Work with a copy of the GNU GPL and this     license document.</li> <li>c) For a Combined Work that displays copyright notices during     execution, include the copyright notice for the Library among     these notices, as well as a reference directing the user to the     copies of the GNU GPL and this license document.</li> <li>d) Do one of the following:<ul> <li>0) Convey the Minimal Corresponding Source under the terms of     this License, and the Corresponding Application Code in a form     suitable for, and under terms that permit, the user to     recombine or relink the Application with a modified version of     the Linked Version to produce a modified Combined Work, in the     manner specified by section 6 of the GNU GPL for conveying     Corresponding Source.</li> <li>1) Use a suitable shared library mechanism for linking with     the Library. A suitable mechanism is one that (a) uses at run     time a copy of the Library already present on the user's     computer system, and (b) will operate properly with a modified     version of the Library that is interface-compatible with the     Linked Version.</li> </ul> </li> <li>e) Provide Installation Information, but only if you would     otherwise be required to provide such information under section 6     of the GNU GPL, and only to the extent that such information is     necessary to install and execute a modified version of the     Combined Work produced by recombining or relinking the Application     with a modified version of the Linked Version. (If you use option     4d0, the Installation Information must accompany the Minimal     Corresponding Source and Corresponding Application Code. If you     use option 4d1, you must provide the Installation Information in     the manner specified by section 6 of the GNU GPL for conveying     Corresponding Source.)</li> </ul>"},{"location":"twin-repos/cookiecutter-python-package/%7B%7Bcookiecutter.project_slug%7D%7D/LICENSE/#5-combined-libraries","title":"5. Combined Libraries.","text":"<p>You may place library facilities that are a work based on the Library side by side in a single library together with other library facilities that are not Applications and are not covered by this License, and convey such a combined library under terms of your choice, if you do both of the following:</p> <ul> <li>a) Accompany the combined library with a copy of the same work     based on the Library, uncombined with any other library     facilities, conveyed under the terms of this License.</li> <li>b) Give prominent notice with the combined library that part of it     is a work based on the Library, and explaining where to find the     accompanying uncombined form of the same work.</li> </ul>"},{"location":"twin-repos/cookiecutter-python-package/%7B%7Bcookiecutter.project_slug%7D%7D/LICENSE/#6-revised-versions-of-the-gnu-lesser-general-public-license","title":"6. Revised Versions of the GNU Lesser General Public License.","text":"<p>The Free Software Foundation may publish revised and/or new versions of the GNU Lesser General Public License from time to time. Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns.</p> <p>Each version is given a distinguishing version number. If the Library as you received it specifies that a certain numbered version of the GNU Lesser General Public License \"or any later version\" applies to it, you have the option of following the terms and conditions either of that published version or of any later version published by the Free Software Foundation. If the Library as you received it does not specify a version number of the GNU Lesser General Public License, you may choose any version of the GNU Lesser General Public License ever published by the Free Software Foundation.</p> <p>If the Library as you received it specifies that a proxy can decide whether future versions of the GNU Lesser General Public License shall apply, that proxy's public statement of acceptance of any version is permanent authorization for you to choose that version for the Library.</p>"},{"location":"twin-repos/cookiecutter-python-package/%7B%7Bcookiecutter.project_slug%7D%7D/TODO/","title":"TODO","text":"<p>This TODO list is automatically generated from the cookiecutter-python-project template. The following tasks need to be done to get a fully working project:</p> <p>{% if cookiecutter.remote_url == 'None' -%} * Set up a remote repository. You can e.g. create a project in GitHub or GitLab and run   the following commands in your locally generated project folder: <code>git remote add origin &lt;Remote-URL&gt;</code>   For a seamless integration, the name of the project should also be <code>{{ cookiecutter.project_slug }}</code>. {%- else -%} * Push to your remote repository for the first time by doing <code>git push origin main</code>. {%- endif %} * Head to your user settings at <code>https://pypi.org</code> and setup PyPI trusted publishing.   In order to do so, you have to head to the \"Publishing\" tab, scroll to the bottom   and add a \"new pending publisher\". The relevant information is:   * PyPI project name: <code>{{ cookiecutter|modname }}</code>   * Owner: <code>{{ cookiecutter|username }}</code>   * Repository name: <code>{{ cookiecutter.project_slug }}</code>   * Workflow name: <code>pypi.yml</code>   * Environment name: not required * Enable the integration of Readthedocs with your Git hoster. In the case of Github, this means   that you need to login at Read the Docs and click the button   Import a Project. {%- if cookiecutter.github_actions_ci == 'Yes' %} * Enable the integration with <code>codecov.io</code> by heading to the Codecov.io Website,   log in (e.g. with your Github credentials) and enable integration for your repository. In order to do   so, you need to select it from the list of repositories (potentially re-syncing with GitHub). Then, head   to the \"Settings\" Tab and select \"Global Upload Token\". Here, you should select the \"not required\" option.</p>"},{"location":"twin-repos/cpp-project-template/","title":"C++ Project Template","text":"<p>A simple template repository to start a new C++ project using CMake.</p> <p>Click on the green <code>Use this template</code> button to get started.</p> <p>If you are looking for more advanced features (such as Python bindings or integration with sites like ReadTheDocs, codecov, sonarcloud or PyPI) take a look at our C++ Project Cookiecutter</p>"},{"location":"twin-repos/cpp-project-template/#contents","title":"Contents","text":"<p>This example project contains the <code>adder</code> library, an application <code>adder_app</code> which uses this library, and a test-suite which tests the library.</p> <p>Any pull-requests or commits to the repository trigger GitHub Actions, which will compile the code and run the tests.</p> <p>Project structure:</p> <ul> <li>src</li> <li>the <code>adder</code> library source code</li> <li>this is where the meat of the project is: the implementation</li> <li>include/adder</li> <li>the <code>adder</code> library headers</li> <li>the public interface of the library</li> <li>app</li> <li>the application which uses the <code>adder</code> library</li> <li>tests</li> <li>the test code</li> <li>each <code>x.cpp</code> file has a corresponding <code>x_t.cpp</code> file here with tests</li> <li>ext</li> <li>external libraries, e.g. Catch2 testing framework</li> <li>.github/workflows/ci.yml</li> <li>the GitHub Actions configuration</li> </ul>"},{"location":"twin-repos/cpp-project-template/#compiling","title":"Compiling","text":"<p>To compile the project and run the tests:</p> <pre><code>mkdir build\ncd build\ncmake .. -DCMAKE_BUILD_TYPE=Release\nmake\nmake test\n</code></pre>"},{"location":"twin-repos/cpp-project-template/#documentation","title":"Documentation","text":"<p>If you have Doxygen installed you can also build the documentation by enabling the <code>BUILD_DOCS</code> CMake option, and then running <code>make doxygen</code>:</p> <pre><code>cmake .. -DCMAKE_BUILD_TYPE=Release -DBUILD_DOCS=ON\nmake doxygen\n</code></pre> <p>This will generate the documentation in the <code>html</code> folder.</p>"},{"location":"twin-repos/fortran-project-template/","title":"Content of your source code documentation #","text":"<ul> <li>Name and short description of the software, authors, date of initial development</li> <li>Main features</li> <li>Main requirements</li> <li>Further information:<ul> <li>Input examples and explanations, step-by-step tutorial</li> <li>More detailed description of scientific approach and input variables reference</li> <li>Validity range of the parameters</li> <li>License, bug tracker, references, citations</li> <li>Source code description - functions and classes, modules, variables</li> </ul> </li> </ul>"},{"location":"twin-repos/fortran-project-template/#fortran-project-template","title":"fortran-project-template #","text":"<p>This is a template for your software project. The example code performs a matrix-vector multiplication for real and complex matrices/vectors, and a matrix diagonalization routine per the respective LAPACK routines.</p> <p>Scientific Software Center, Heidelberg University, 12/2020</p> <p>The program requires a fortran compiler, BLAS/LAPACK libraries, doxygen/graphviz for the documentation, and pFUnit, which is used for the unit testing. To install these on i.e. ubuntu, type <code>source requirements.txt</code>.</p> <p>Compile the source code with <code>make</code> in the main directory. This will place the compiled program in <code>./bin</code> and also compile the unit tests which are contained in the folder <code>./tests</code>. The input parameters are contained in <code>run/data.inp</code> and output is written to <code>data.out</code>. To execute the program, cd into the <code>run</code> directory and execute <code>../bin/sample_program</code>.</p>"},{"location":"twin-repos/fortran-project-template/#github-actions","title":"github actions","text":"<p>This repository contains a github action in <code>./github/workflows/</code>. This will run unit tests upon push to the master branch and upon pull request. The action can also be run manually in the \"Actions\" tab on the github website.</p>"},{"location":"twin-repos/fortran-project-template/#testing","title":"Testing","text":"<p>You should always test your code against a reference. In this template, we use <code>pFUnit</code> (https://github.com/Goddard-Fortran-Ecosystem/pFUnit) for the unit tests (parallel funit).</p> <p>So far, only unit tests are included in the code template (that is, tests of a specific component of the software), but as you develop your software, you should also add <code>integration tests</code> that check the overall behaviour of your code.</p> <p>In the github action, the tests are performed under the ubuntu operating system, ideally you would ensure that the code runs also on other operating systems.</p>"},{"location":"twin-repos/fortran-project-template/#source-code-documentation-functions-modules-classes","title":"Source Code Documentation: Functions, modules, classes, ...","text":"<p>The documentation should be updated as you update your code. Include appropriate method descriptions in your code and running <code>doxygen</code> in the <code>doc</code> directory will update the documentation html for your functions, classes, etc. On your local machine, you can navigate to <code>doc/index.html</code> and check the styling. If your code is in a public repository, you can push your documentation to Read the docs or github pages.</p>"},{"location":"twin-repos/fortran-project-template/doc/further/","title":"Further","text":"<p>Here goes a description of the licensing, bug tracking, references and citations for your program.</p>"},{"location":"twin-repos/fortran-project-template/doc/input/","title":"Input","text":"<p>Here goes a description of the input required for your program.</p>"},{"location":"twin-repos/fortran-project-template/doc/input/#program-input","title":"Program input","text":"<p>The input parameters are given in the file <code>data.inp</code>. Input blocks are currently surrounded by <code>$start ... $end</code>. There are three input parameters, <code>matdim</code> which sets the dimensionality of the square matrices and vectors and is a positive integer, <code>matval</code> which is used to fill the matrices/vectors and is a real number, and the logical <code>do_diag</code> which specifies if the matrix diagonalization should be carried out. </p> <p>The output is written to <code>data.out</code> and currently contains a real and a complex matrix after transformation when no diagonalization is performed; or the eigenvectors and eigenvalues if diagonalization is carried out.</p>"},{"location":"twin-repos/fortran-project-template/doc/method/","title":"Method","text":"<p>Here goes a description of the scientific method and explanation of the keywords in terms of a method reference.</p> <p>This is to use latex-style equations in github/doxygen markdown:</p> <p></p>"},{"location":"twin-repos/fortran-project-template/doc/method/#methods","title":"Methods","text":"<p>The program uses the LAPACK routines DGEMV, and ZGEMV for real and complex matrix-vector multiplication; and DSYEV and ZHEEV for the matrix diagonalization of symmetric/hermitian matrices. The links to the routine descriptions are provided in the subroutine descriptions.</p>"},{"location":"twin-repos/fortran-project-template/doc/parameters/","title":"Parameters","text":"<p>Here goes a description of the parameters and their validity range.</p> <ul> <li>The input parameter <code>matdim</code> - the matrix/vector dimension - can only be an integer number larger than two.</li> <li>The input parameter <code>matval</code> - the matrix/vector value - can only be an real number.</li> <li>The input logical <code>do_diag</code> specifies whether matrix diagonalization is performed and can be either <code>True</code> (perform matrix diagonalization) or <code>False</code> (no matrix diagonalization.</li> </ul>"},{"location":"twin-repos/guidelines/","title":"Coding Guidelines","text":"<p>Our recommendations for creating and maintaining reliable scientific software.</p>"},{"location":"twin-repos/guidelines/#general-guidelines","title":"General Guidelines","text":"<p>The General Guidelines apply to any project, regardless of the choice of programming language.</p>"},{"location":"twin-repos/guidelines/#language-specific-guidelines","title":"Language specific guidelines","text":"<ul> <li>C++</li> <li>Python</li> <li>Julia</li> <li>Fortran</li> </ul>"},{"location":"twin-repos/guidelines/cpp/","title":"C++ Coding Guidelines","text":"<p>Our recommendations for creating and maintaining reliable C++ scientific software. </p>"},{"location":"twin-repos/guidelines/cpp/#good-default-choices","title":"Good default choices","text":"<p>Here are our suggested default choices for build systems and third party libraries, which are all widely used and well supported:</p> <ul> <li>Version control: GitHub</li> <li>de facto standard for open source software</li> <li>start from our C++ template repository</li> <li>private repos also available</li> <li>Build system: CMake</li> <li>de facto standard for C++</li> <li>widely used and supported</li> <li>cross-platform</li> <li>Have a look at our dedicated CMake recommendations</li> <li>Testing framework: Catch2</li> <li>simple to setup and to use</li> <li>Continuous Integration: GitHub Actions</li> <li>well integrated with Github</li> <li>Documentation: Doxygen</li> <li>de facto standard for C++ documentation generation</li> <li>C++ Standard: 11 (or higher)</li> <li>many third party libraries now require this as a minimum</li> </ul> <p>For each choice there are of course many alternatives, each with their pros and cons, but these represent a sensible default choice for the vast majority of C++ projects.</p> <p>Our C++ Project Template is a simple way to start a new C++ project with all of the above already set up - just click on the green <code>Use this template</code> button.</p> <p>If you are looking for more features such as python bindings, or alternative CI or git hosting providers, see our C++ Project Cookiecutter.</p>"},{"location":"twin-repos/guidelines/cpp/#tooling","title":"Tooling","text":"<p>Good tools make it easier to develop good code. Unlike the previous section, where a single choice must be made for the project, each person contributing to a project can use whichever tools they prefer. Some recommendations:</p> <ul> <li>IDE</li> <li>Visual Studio Code: free</li> <li>CLion: paid (but offer free academic licenses)</li> <li>CodeBlocks: free</li> <li>Code formatting</li> <li>Don't do this manually, and especially don't spend time debating how code should be formatted!</li> <li>Just pick a tool that does it automatically (e.g. your IDE, or clang-format)</li> <li>pre-commit and pre-commit.ci is a great way to do this</li> <li>Sanitizers    Sanitizers are compiler tools that enable runtime checks for specific aspects of a program, e.g., thread-safety, memory management, undefined behavior and others. These sanitizers can be enabled at compile time, and will run alongside the compiled program and detect and report suspicious behavior. This comes with a performance penalty that depends on the sanitizer used, hence they should not be enabled in production builds. To get the best reports, make sure you compile a symbolized binary. Available sanitizers differ from compiler to compiler: <ul> <li>Visual Studio</li> <li>Clang</li> <li>GCC</li> </ul> </li> <li>Package managers</li> <li>Package managers can help reduce overhead from dependency management.</li> <li>Conan</li> <li>vcpkg</li> <li>Debugging, Profiling and Benchmarking   There is a plethora of solutions for different platforms and use cases</li> <li>Google Performance Tools CPU and Memory profiling</li> <li>Nvidia Nsight for CUDA code</li> <li>Valgrind Instrumentation suite that includes heap- and cache-profilers as well as memory debugging tools</li> </ul>"},{"location":"twin-repos/guidelines/cpp/#recommended-third-party-libraries","title":"Recommended third party libraries","text":"<p>It is nearly always better, where possible, to use a well tested and maintained third party library instead of rolling your own solution to a problem. Typical benefits include: less bugs, better performance, less maintenance. Wherever possible, one should use the C++ standard template library (STL) and only use third-party dependencies when the STL does not suffice. </p> <p>Here are our recommendations for third party libraries to solve some common problems in scientific computing:</p> <ul> <li>Vector/Matrix algebra: Eigen</li> <li>use case: multiply matrices, invert matrices</li> <li>allows you to write simple, expressive code</li> <li>high performance results</li> <li>Logging: spdlog</li> <li>use case: log messages / debugging information to the terminal / to a file</li> <li>simple to setup and to use</li> <li>String formatting: fmt</li> <li>use case: formatting strings, e.g. replacing <code>printf</code> calls</li> <li>simple python-like interface, fast performance</li> <li>General purpose libraries that augment the STL with a wide array of functionality:</li> <li>Boost</li> <li>Abseil</li> <li>Cross-language hierarchical data storage:</li> <li>HDF5 </li> <li>Fast, cross-language tabular data storage: </li> <li>Apache Arrow</li> <li>Multithreading and Parallelization:</li> <li>OpenMP</li> <li>Intel oneTBB</li> </ul>"},{"location":"twin-repos/guidelines/cpp/cmake/","title":"CMake","text":"<p>CMake is the de facto standard build system for C++ projects.</p> <p>Here are a collection of recommended links, guides and talks on how to use it.</p>"},{"location":"twin-repos/guidelines/cpp/cmake/#getting-started","title":"Getting Started","text":"<p>We recommend this guide to get started with CMake:</p> <ul> <li>An Introduction to Modern CMake</li> </ul> <p>Or alternatively these two videos from Jason Turner:</p> <ul> <li>Intro to CMake</li> <li>The Ultimate CMake / C++ Quick Start</li> </ul> <p>It can also be helpful to take a look at a simple example CMake project:</p> <ul> <li>CLIUtils/modern-cmake/simple-project</li> <li>pabloariasal/modern-cmake-sample</li> <li>ssciwr/cpp-project-template</li> </ul> <p>If you are starting a new project check out our C++ Project Cookiecutter:</p> <ul> <li>C++ Project Cookiecutter</li> </ul>"},{"location":"twin-repos/guidelines/cpp/cmake/#official-documentation","title":"Official Documentation","text":"<p>The official CMake documentation is a very useful and complete source of reference information, for example if you want to look up the specific details of a particular command. It can also be a bit overwhelming, and doesn't have many examples of how to actually do things, so it is probably not the best place to start learning how to use CMake.</p>"},{"location":"twin-repos/guidelines/cpp/cmake/#best-practices","title":"Best practices","text":"<p>For people already using CMake who would like to learn and apply modern CMake best practices to their C++ projects: - Effective Modern CMake - It's Time To Do CMake Right - Modern CMake for modular design, Mathieu Ropert: video, slides - More Modern CMake, Deniz Bahadir: video - Oh No! More Modern CMake, Deniz Bahadir: video</p>"},{"location":"twin-repos/guidelines/cpp/cmake/#advanced-talks","title":"Advanced talks","text":"<p>For people writing C++ libraries: - Effective CMake, Daniel Pfeifer: video, slides - Deep CMake for Library Authors, Craig Scott: video, slides - Modern CMake Modules, Bret Brown: video</p>"},{"location":"twin-repos/guidelines/fortran/","title":"Fortran Coding Guidelines","text":"<p>Our recommendations for creating and maintaining reliable scientific software in Fortran.</p>"},{"location":"twin-repos/guidelines/fortran/#fortran-general-remarks","title":"Fortran general remarks","text":"<p>Fortran is used for scientific high-performance computing focusing on numerical applications. It is especially strong for array-based operations, with its inherent support for parallelism and vectorization.</p> <p>Fortran code is most often legacy code having been developed over generations of researchers, using different Fortran dialects (most commonly Fortran77 and Fortran90). It has therefore some very language-specific topics that are very briefly summarized here. For a more complete list, consult the Fortran language community.</p>"},{"location":"twin-repos/guidelines/fortran/#good-default-choices","title":"Good default choices","text":"<p>Here are our suggested default choices for build systems and third party libraries:</p> <ul> <li>Version control: GitHub</li> <li>de facto standard for open source software</li> <li>start from our Fortran template repository for a repository complete with documentation build, tests and GitHub actions</li> <li>Testing framework: </li> <li>pFUnit<ul> <li>unit tests for Fortran</li> </ul> </li> <li>pytest<ul> <li>use pytest to drive your Fortran code, harnessing the power of the testing framework and at the same time account for the intricacies of Fortran legacy codebases and workflows - see an example</li> </ul> </li> <li>Continuous Integration: GitHub Actions</li> <li>well integrated with GitHub</li> <li>Documentation: Doxygen</li> <li>can harness your comments from the source code</li> <li>Documentation hosting: readthedocs or MkDocs, or GitHub pages (see general recommendations)</li> <li>Fortran versions/dialects:</li> <li>Use of Fortran versions from Fortran90 or later is recommended, due to the dynamic memory allocation and deprecation of GOTO constructs</li> </ul> <p>Our Fortran Project Template is a simple way to start a new Fortran project with all of the above already set up - just click on the green <code>Use this template</code> button. You can try it out and compare to learn how to adapt this for your legacy Fortran project.</p>"},{"location":"twin-repos/guidelines/fortran/#fortran-standards","title":"Fortran standards","text":"<p>Fortran has different standards according to its version. Some general remarks are summarized here, loosely based on the Fortran90 documentation, Fortran-lang and own experience: - Fortran implementations generally do not make heavy use of more complex objects and namespaces. Therefore, it is advised to use descriptive names, define them within their scope ideally in module files that are passed through <code>use</code> statements, keep names consistent in the scope and separate concerns. Historically, the use of memory was costly, so that legacy codebases often reuse variables and (parts of) matrices. Avoid this practice in newer code and refactor legacy code to be more explicit. - Use English language for all variable names, comments etc. - Use all lowercase letters for all Fortran constructs (<code>do</code>, <code>subroutine</code>, <code>integer</code>, <code>intent</code>, ...) - Use four spaces for indent. - Declare floats as <code>real(dp)</code> with <code>dp</code> defined in your parameters module. - Refactor any <code>GOTO</code> constructs that you chance upon. - Use <code>implicit none</code> to avoid setting of implicit variables including their types. - Make use of modules and include your subroutines in modules. - Keep the main program short, rather <code>use</code> modules and call subroutines. - Make use of assumed-shape arrays <code>1D_array(:)</code> and <code>2D_array(:,:)</code> and initialize these to zero before you start using them. (Alternatively, your compiler can handle this, but users may work with modified compiler options.) Allocate them in a sensible place in the program, you may also use a module for the memory allocation. Deallocate after use with the same strategy. - Keep in mind that Fortran stores arrays in column-major order. Always access slices as <code>2D_array(:, 1)</code> or <code>3D_array(:, :, 1)</code>, with the colons should be on the left for a contiguous stride in memory (same applies to loops): <pre><code>do i3 = 1, N3\n    do i2 = 1, N2\n        do i1 = 1, N1\n            A(i1, i2, i3)\n        end do\n    end do\nend do\n</code></pre></p> <p>This list is by no means complete, there are many constructs in Fortran legacy code that require specific techniques for adaption, but this is beyond the scope of this guideline.</p>"},{"location":"twin-repos/guidelines/fortran/#tooling","title":"Tooling","text":"<p>Good tools make it easier to develop good code. Some tools have been named above, here are some more recommendations:</p> <ul> <li>IDE</li> <li>Visual Studio Code: free, install Fortran language extension</li> <li>Sublime Text: free but will ask you to purchase from time to time</li> <li>Linting</li> <li>Keep your code clean using linters such as fortitude</li> <li>Pre-commit hooks: </li> <li>Use pre-commit to automatically lint your code upon commit.</li> <li>GitHub Actions</li> <li>Use the GitHub setup-fortran action for your CI pipeline to install compilers and math libraries</li> <li>Debugging</li> <li>Use <code>gdb</code> or <code>valgrind</code> for debugging</li> <li>Profiling</li> <li>Many different profiles exist, the very basic <code>gprof</code> already does a pretty decent job.</li> </ul>"},{"location":"twin-repos/guidelines/fortran/#recommended-libraries","title":"Recommended libraries","text":"<p>The Fortran ecosystem does not benefit from a vast library usage as is the case in ie. Python. Make use of BLAS/LAPACK calls whenever possible, same applies to FFTs. For more specific operations such as solution of differential equations, different libraries exist.</p>"},{"location":"twin-repos/guidelines/fortran/#other-recommendations","title":"Other recommendations","text":"<ul> <li>Use a <code>Makefile</code> at the very least.</li> <li>Compile and test your code without compiler optimization and debug flags, and with optimization, both for compilation and runtime errors.</li> <li>Use different compilers to test your code, ie. <code>ifx</code> and <code>gfortran</code>. While <code>ifx</code> leads to more performant code, <code>gfortran</code> is more strict on your implementation and may help you identify potential issues.</li> </ul>"},{"location":"twin-repos/guidelines/general/","title":"General Guidelines","text":"<p>The general guidelines provide an overview of sustainable software development and good scientific practice in research software engineering. They provide a general framework which researchers should adhere to when writing scientific software. However, each programming language introduces its own flavor and so the tools that are recommended can be language-specific. Please check the guidelines for the language that you are using. Currently, C++, Python and Julia are available. Please open an issue for requesting guides for further programming languages or other updates.</p>"},{"location":"twin-repos/guidelines/general/#version-control","title":"Version control","text":"<p>Any software that is actively developed should be under version control. Version control allows you to keep track of any changes to your software and review the history at any time. It also allows you to track issues and work collaboratively. A version-control system such as <code>git</code> for your software should be the default. To host your remote repository, different providers are available such as GitHub, GitLab, and Bitbucket.</p>"},{"location":"twin-repos/guidelines/general/#content-of-a-repository","title":"Content of a repository","text":"<p>A repository is the central storage location for software source code, documentation and other related files. Through a repository and a version-control system, changes to the software are being tracked and managed.</p> <p>A software repository should contain the following files: - A <code>README.md</code> file with the following elements:   - [ ] Name   - [ ] Description of the project   - [ ] Badges (optional)   - [ ] Overview diagrams (visuals) to understand the project   - [ ] Installation guide   - [ ] Usage examples   - [ ] Support   - [ ] Roadmap   - [ ] Contributing   - [ ] Authors and acknowledgment   - [ ] License   - [ ] Project status   See, for example, Awesome README.</p> <ul> <li> <p>A <code>LICENSE</code> file for the project. There are a variety of licenses to choose from, the SSC generally recommends a license with all options but no restrictions like the MIT license. GitHub offers license templates that you can use to create your license file. If you add a new file to your repository through the GitHub website, or if you create a new repository, you also have the option of generating the license from the templates automatically.</p> </li> <li> <p>A <code>CITATION.cff</code> file with information about how to cite your software.</p> </li> <li> <p>Some sort of <code>requirements.txt</code>, <code>CMakeLists.txt</code>, <code>Makefile</code>, for example, or <code>Dockerfile</code>, that specifies the required packages and ideally, installation environment. Further installation instructions should be included in the <code>README.md</code>. Optional: A developer dependency file that contains additional dependencies needed for developing the software.</p> </li> <li> <p>A <code>.gitignore</code> file that helps you keep unnecessary files untracked by the version control system. GitHub provides you with a template automatically when you add a new <code>.gitignore</code> file via the website, or create a new repository.</p> </li> </ul> <p>The following files are optional files: - A <code>CONTRIBUTING.md</code> file with guidelines and information for contributors. This applies if you would like to actively solicit contributions to your repository.</p> <ul> <li>Configuration files for pre-commit hooks, linters, and GitHub actions.</li> </ul>"},{"location":"twin-repos/guidelines/general/#github-etiquette","title":"GitHub etiquette","text":"<p>If you use GitHub or GitLab, you should use the respective etiquette as appropriate. A standard way of developing software under git version control is git-flow; a lightweight version of this and recommended and predominantly used by the SSC is github-flow.</p> <p>Never push directly to the main branch! The git and GitHub workflow entail making changes in branches, running (and passing) automated checks (see below) like code linter, code formatter, code quality reviewer, unit tests, further tests, code test coverage, ... before merging with main. A merge with main is preceded by a Pull Request where teams and collaborators can review code, and that trigger the automated checks. These means are meant to keep the main branch functional and deliverable at all times.</p>"},{"location":"twin-repos/guidelines/general/#commiting-code-commit-messages","title":"Commiting Code: Commit messages","text":"<p>When committing code to the repository, use meaningful commit messages that explain others (and yourself) what you did and can be used to \"tell a story\". The commits should be grouped in Pull Requests (PR) that ideally serves only one purpose. The changes in the line of development in the PR should be summarized in the PR description. You may also link issues during the PR.</p> <p>A way to structure your commit messages is using conventional commits. When you merge PRs that have multiple commits (as they have usually) with the main branch, it is recommended that you squash and merge to group the commits in this line of development together.</p>"},{"location":"twin-repos/guidelines/general/#continuous-integration-ci-continuous-delivery-cd","title":"Continuous integration (CI) / continuous delivery (CD)","text":"<p>It is recommended to use CI in Pull (Merge) requests, to run automated checks that ensure your code is adhering to certain standards and passing tests. Different CI/CD integration tools are available, such as GitHub actions, GitLab CI, Jenkins, and Travis CI, to name a few. </p> <p>Depending on the scope and computational demands of your software, checks that can be included entail pre-commit, Sonarcloud, codecov, and unit/regression/system/... tests (see the language-specific recommendations). You may also integrate dependabot alerts and snyk for automated PRs about new dependency releases and vulnerabilities. GitGuardian is a tool that helps you keep your code and environment secrets safe.</p> <p>To learn about CI and CD on GitHub, visit this page. GitHub actions are free for public repositories, and provide a limited free monthly quota for private repositories. One of the big advantages of CI is that you can run checks in different environments (operating systems, dependency versions, etc).</p>"},{"location":"twin-repos/guidelines/general/#documentation","title":"Documentation","text":"<p>Good documentation is essential for ensuring users know what to do with the code, and are applying it to the correct use cases. It will save time in the long run, as code by itself is rarely obvious, and it will help outline dependencies. Depending on the programming language used, we recommend different tools like <code>doxygen</code>, <code>sphinx</code>, or using markdown/a wiki.</p> <p>The documentation can be hosted on ecosystem-wide platforms, for example, <code>readthedocs</code> for Python projects, or more generally using GitHub pages or Gitlab. To learn how to set up GitHub pages, see here.</p> <p>The documentation should be structured in Tutorials, How-to guides, API references, and Explanations (see Diataxis documentation guide).  The essential content of a documentation entails: - Explanations   - Name of the software (optional: Badges)   - Short description of the software   - Authors   - Date of initial development   - Main features   - Main requirements   - Validity range of the parameters   - License information   - Bug tracker   - References   - Citation information - Tutorials and How-To guides   - Input examples and explanations, step-by-step instructions   - More detailed description of scientific approach and input variables reference - API and developer references    - Source code description - functions and classes, modules, variables  </p>"},{"location":"twin-repos/guidelines/general/#testing","title":"Testing","text":"<p>(Automated) testing ensures that errors are detected early and that results are reproducible. Implementing the tests and keeping them updated requires effort, but will pay off in the long run. When planning your software, you can also make use of a test-driven development philosophy which makes structuring your code easier. Keep in mind that reproducibility is a requirement for good scientific practices. Automated testing allows for continuous integration/continuous delivery (deployment) (CI/CD). </p>"},{"location":"twin-repos/guidelines/general/#code-review","title":"Code review","text":"<p>Code review - involving your collaborators in any changes you made to the code and vice versa - increases the chance of errors being detected early. Furthermore, it also aids knowledge transfer and keeps you up to date on what features are being implemented. Code review is easy to incorporate in your work flow through <code>GitHub pull requests</code>.</p>"},{"location":"twin-repos/guidelines/julia/","title":"Julia coding guidelines","text":"<p>Our recommendations for creating and maintaining reliable scientific software in Julia.</p>"},{"location":"twin-repos/guidelines/julia/#good-default-choices","title":"Good default choices","text":"<ul> <li> <p>Version control: GitHub</p> <ul> <li>de facto standard for open source software </li> <li>provides all necessary tools for developing software in a team</li> <li>includes Continuous Integration pipelines for continuous testing  </li> </ul> </li> <li> <p>Continuous integration: GitHub actions</p> <ul> <li>comes integrated into GitHub already</li> <li>large template library from which your workflow can be put together</li> </ul> </li> <li> <p>Testing framework: Test.jl</p> <ul> <li>standard library option for unit tests, rough analogon to Python's UnitTest library</li> </ul> </li> <li> <p>Documentation: Documenter.jl</p> <ul> <li>Markdown based </li> <li>includes doctests for code examples </li> <li>can be seen as an analogon to Sphinx</li> </ul> </li> <li> <p>Profiling: </p> <ul> <li> <p>Profile.jl: </p> <ul> <li>Part of the Julia standard library.</li> <li>Can be used to profile allocations and CPU - time</li> <li>various visualizations available via separate packages (ProfileView.jl, FlameGraphs.jl, ProfileVega.jl)</li> </ul> </li> <li> <p>BenchmarkTools.jl: For more high-level, statistical information about execution time.</p> </li> </ul> </li> </ul>"},{"location":"twin-repos/guidelines/julia/#tooling","title":"Tooling","text":"<p>Julia is a relatively young language with a smaller community than, say, Python, C++ or Matlab. As such, the selection of tools is a bit more limited. Some suggestions: </p> <ul> <li> <p>IDE/Code Editor: </p> <ul> <li>Visual Studio Code: Free. The de-facto standard in the community. Provides support for linting, test discovery, formatting and more. Recommended way to go.</li> <li>Juno: Free. Build on top of Atom. Atom is no longer supported by Microsoft/GitHub, and Juno is only maintained and wont receive new features. Only consider this if you already have an Atom-based workflow and are unwilling to switch. </li> <li>Sublime Text: Free, but will occasionally ask you to buy it. Syntax highlighting for Julia is available, but support for other functions is less developed than in the other two.</li> </ul> </li> <li> <p>Code Formatting: </p> <ul> <li>automatic formatting is available via VSCode's Julia plugin or through Juno.</li> </ul> </li> <li> <p>Linting: </p> <ul> <li>linting is available via VSCode's Julia plugin or through Juno.</li> </ul> </li> </ul>"},{"location":"twin-repos/guidelines/julia/#recommended-libraries","title":"Recommended libraries","text":"<ul> <li> <p>Arrays and vectors (numpy analogon): </p> <ul> <li>standard library core contains classes for dense, n-dimensional arrays analogous to numpy-arrays. </li> <li>SparseArrays.jl: Part of the standard library. Supports sparse vectors and matrices.</li> <li>Tensors.jl and TensorOperations.jl: For higher-order-Tensor math.</li> </ul> </li> <li> <p>Linear Algebra: </p> <ul> <li>LinearAlgebra.jl: Standard library module for linear algebra operations like matrix traces, inverse, multiplication and so on. </li> </ul> </li> <li> <p>Data analysis and data transformation: </p> <ul> <li>DataFrames.jl and DataFramesMeta.jl for tabular data. Julia's analog to Pandas known from Python. Use this for higher performance. </li> <li>Query.jl Apply common data-analysis workflows like split-apply-combine, filter etc to almost any iterable Julia data structure. Useful when working with data that's available in various different formats.  </li> </ul> </li> <li> <p>Data input/output and storage: </p> <ul> <li>HDF5.jl: For arbitrary data that should have a hierarchical organization in a single file. </li> <li>Arrow.jl: For arbitrary data that's organized in a tabular fashion.</li> <li>CSV.jl: For tabular, human readable data output. </li> </ul> </li> <li> <p>Visualization: </p> <ul> <li>Plots.jl: Julia Frontend with a homogeneous interface for various well known plotting packages like matplotlib, plotly or GR. </li> <li>Makie.jl: Feature-complete plotting package in pure Julia. </li> <li>AlgebraOfGraphics.jl Provides support for the grammar-of-graphics paradigm based on Makie.jl .</li> <li>VegaLite.jl: Provides access to VegaLite from Julia, particularly useful for making interactive graphics. </li> </ul> </li> <li> <p>Machine Learning/Deep Learning: </p> <ul> <li>SciKitLearn.jl for having access to the python based scikit-learn library in Julia. </li> <li>Flux.jl for deep learning applications. </li> </ul> </li> </ul> <p>Have a look at the JuliaHub package database to find other packages for your use case. </p>"},{"location":"twin-repos/guidelines/julia/#style-guides-and-best-practices","title":"Style guides and best-practices:","text":"<p>Much has already been written about how to write good Julia code which needs not be repeated here. Here are some starting points:  - Official style guide - Official performance tips</p>"},{"location":"twin-repos/guidelines/python/","title":"Python Coding Guidelines","text":"<p>Our recommendations for creating and maintaining reliable scientific software in Python.</p>"},{"location":"twin-repos/guidelines/python/#good-default-choices","title":"Good default choices","text":"<p>Here are our suggested default choices for build systems and third party libraries, which are all widely used and well supported:</p> <ul> <li>Version control: GitHub</li> <li>de facto standard for open source software</li> <li>start from our Python template repository for more basic Python code or our Python cookiecutter for developing Python packages</li> <li>private repos also available</li> <li>Testing framework: </li> <li>unittest<ul> <li>already part of the Python standard library</li> </ul> </li> <li>pytest<ul> <li>offers all of the functionality of unittest and additional tools for more advanced testing requirements</li> </ul> </li> <li>Continuous Integration: GitHub Actions</li> <li>well integrated with Github</li> <li>Documentation: Sphinx</li> <li>the default for Python documentation</li> <li>Documentation hosting: readthedocs or MkDocs, or GitHub pages (see general recommendations)</li> <li>References: <ul> <li>Sphinx setup tutorial Scientific Software Center</li> </ul> </li> <li>Python versions:</li> <li>official list of supported versions</li> </ul> <p>For each choice there are of course many alternatives, each with their pros and cons, but these represent a sensible default choice for the vast majority of Python projects.</p> <p>Our Python Project Template is a simple way to start a new Python project with all of the above already set up - just click on the green <code>Use this template</code> button.</p> <p>For more advanced features such as automated pypi deployment and package versioning integrated with git see our Python Package Cookiecutter</p>"},{"location":"twin-repos/guidelines/python/#python-standards-and-package-names","title":"Python standards and package names","text":"<p>Adhere to Python styling recommendations (PEP8). A standard style of Python code helps you parse the code more quickly and also helps others understand your code without mental effort involved in figuring out how the information is presented.</p> <p>Once you decide on a valid Python package name, check the general web and the Python ecosystem if this name is already taken (google.com,-pypi.org, pystats).</p>"},{"location":"twin-repos/guidelines/python/#tooling","title":"Tooling","text":"<p>Good tools make it easier to develop good code. Unlike the previous section, where a single choice must be made for the project, each person contributing to a project can use whichever tools they prefer. Some recommendations:</p> <ul> <li>IDE</li> <li>Visual Studio Code: free</li> <li>Sublime Text: free but will ask you to purchase from time to time</li> <li>Code formatting</li> <li>Don't do this manually, and especially don't spend time debating how code should be formatted!</li> <li>Just pick a tool that does it automatically (e.g. your IDE, or autopep8, or use Black)</li> <li>Linting</li> <li>Keep your code clean using linters such as flake8</li> <li>Pre-commit hooks: </li> <li>Use pre-commit to automatically format (black) and lint (flake8) your code upon commit. You should also include nbstripout when working with Jupyter notebooks, to ensure only the input is retained in the commit history and not the output (this can overexaggerate your changes and make finding the real changes difficult)</li> <li>Notebooks:</li> <li>Use a spell checker for Jupyter Notebooks</li> <li>Make notebooks available for easy use through google colab or binder</li> <li>Command Line Scripts:</li> <li>For interactive scripts, use argparse or click</li> </ul>"},{"location":"twin-repos/guidelines/python/#recommended-libraries","title":"Recommended libraries","text":"<p>There is a vast abundance of available libraries in Python. When you incorporate such a library in your Python project, you are introducing a dependency. For dependencies you should check that - the dependency is actively maintained - the dependency does not have many issues that have been open for a long time - the dependency has been tested and more widely used (otherwise, be vigilant) - the dependency itself has not too many sub-dependencies - there are no conflicting sub-dependencies between the dependencies themselves that you use in the project</p> <p>When you use a dependency, you should reference it in your <code>requirements.txt</code>or <code>pyproject.toml</code> file. As long as you only use it and not distribute the dependency with your code, you are free to choose the license of your code independently. However, note that if you distribute third-party code together with your software, the licenses need to be compatible and you need to pay proper attribution.</p>"},{"location":"twin-repos/lunch-python/","title":"Lunch Time Python","text":"<p>Welcome to Lunch Time Python - an event series organized by the Scientific Software Center at Heidelberg University.</p>"},{"location":"twin-repos/lunch-python/#what-it-is","title":"What it is","text":"<p>Python is a very popular - maybe even the most popular - programming language among scientific software developers. One of the reasons for this success story is the rich standard library and the rich ecosystem of available (scientific) libraries. To fully leverage this ecosystem, developers need to stay up to date and explore new libraries. Lunch Time Python aims at providing a communication platform between Pythonistas to learn about new libraries in an informal setting. Sessions take roughly 30 minutes, one library is presented per session and the code will be made available afterwards. Come by, enjoy your lunch with us and step up your Python game!</p>"},{"location":"twin-repos/lunch-python/#sessions","title":"Sessions","text":"<p>Next installment of Lunch Time Python: Session 14, Nov 29th 2024, 11:30am</p> <p>Here is a list of past sessions which you can reproduce in a Cloud environment by clicking the Binder or Colab (requires a Google account) links below:</p> <ul> <li> <p>FastAPI: slides, binder, colab, notebook (Session 14, Nov 29th 2024, 11:30am)</p> </li> <li> <p>pydantic: slides, binder, colab, notebook (Session 13, April 23th 2024, 12:00pm)</p> </li> <li> <p>Dash: slides, binder, colab, notebook (Session 12, May 25th 2022, 12:00pm)</p> </li> <li> <p>spaCy: slides, binder, colab, notebook (Session 11, November 25th 2022, 11:30am)</p> </li> <li> <p>pytorch: slides, binder, colab, notebook (Session 10, October 30th 2022, 12pm)</p> </li> <li> <p>mypy: slides, binder, colab, notebook (Session 9, September 30th 2022, 12pm)</p> </li> <li> <p>ipywidgets: slides, binder, colab, notebook (Session 8, July 29th 2022, 12pm)</p> </li> <li> <p>matplotlib: slides, binder, colab, notebook (Session 7, June 24th 2022, 12pm)</p> </li> <li> <p>numba: slides, binder, colab, noteboook (Session 6, April 29th 2022, 12pm)</p> </li> <li> <p>pillow: slides, binder, colab, noteboook (Session 5, March 25th 2022, 12pm)</p> </li> <li> <p>pytest: slides, binder, colab, noteboook (Session 4, February 25th 2022, 12pm)</p> </li> <li> <p>Click: slides, binder, colab, noteboook (Session 3, January 28th 2022, 12pm)</p> </li> <li> <p>SymPy: slides, binder, colab, noteboook (Session 2, November 26th 2021, 12pm)</p> </li> <li> <p>requests: colab, binder, noteboook (Session 1, October 29th 2021, 12 pm)</p> </li> </ul>"},{"location":"twin-repos/lunch-python/#registration","title":"Registration","text":"<p>Registration for Lunch Time Python sessions is not required. You can still register using this form to</p> <ul> <li>give us a better idea about the potential audience and what libraries we should present.</li> <li>make us send you a reminder the day before the session</li> </ul> <p>Suggestions for libraries to present are very welcome as a github issue or as an email to the SSC developers</p>"},{"location":"twin-repos/lunch-python/#licensing","title":"Licensing","text":"<p>The example codes are available on GitHub and are provided under the permissive MIT license giving you a lot of freedom to reuse and redistribute the code in your projects!</p>"},{"location":"twin-repos/lunch-python/IDEAS/","title":"Ideas for libraries to present","text":"<p>I can imagine presenting the following libraries (list is constantly updated). I am unsure which of the below categories is most interesting to the target audience.</p> <p>If you see this and have additional ideas, please open a Pull Request against this repository.</p>"},{"location":"twin-repos/lunch-python/IDEAS/#standard-library","title":"Standard Library","text":"<ul> <li>[ ] argparse</li> <li>[ ] contextlib</li> <li>[ ] csv</li> <li>[ ] functools</li> <li>[ ] itertools</li> <li>[ ] logging</li> <li>[ ] os.path &amp; pathlib</li> <li>[x] typing</li> </ul>"},{"location":"twin-repos/lunch-python/IDEAS/#utility-libraries","title":"Utility Libraries","text":"<ul> <li>[ ] atheris</li> <li>[ ] awkward</li> <li>[ ] beautifulsoup</li> <li>[ ] bidict</li> <li>[ ] cachetools</li> <li>[x] click</li> <li>[x] dash</li> <li>[ ] fastapi</li> <li>[ ] flask</li> <li>[ ] hypothesis</li> <li>[x] ipywidgets</li> <li>[ ] jinja2</li> <li>[ ] memray</li> <li>[x] mypy</li> <li>[ ] nanobind</li> <li>[x] numba</li> <li>[ ] pandera</li> <li>[ ] peewee</li> <li>[x] pillow</li> <li>[ ] pre-commit</li> <li>[ ] pyaml</li> <li>[x] pydantic</li> <li>[ ] pyrsistent</li> <li>[ ] pyscript</li> <li>[x] pytest</li> <li>[x] requests</li> <li>[ ] rich</li> <li>[ ] textual</li> <li>[ ] uv</li> </ul>"},{"location":"twin-repos/lunch-python/IDEAS/#scientific-libraries","title":"Scientific Libraries","text":"<p>The risk with these is: They might be either already well-known or irrelevant to people depending on the domain they are working in. Another issue is that many of these are huge frameworks that can only presented very minimally in the given time frame.</p> <ul> <li>[ ] casadi</li> <li>[ ] dask</li> <li>[ ] jax</li> <li>[x] matplotlib</li> <li>[ ] modin</li> <li>[ ] napari</li> <li>[ ] numpy</li> <li>[ ] pandas</li> <li>[ ] plotly</li> <li>[x] pytorch</li> <li>[ ] scipy</li> <li>[ ] scrapy</li> <li>[x] sympy</li> <li>[ ] tensorflow</li> <li>[ ] transformers</li> <li>[ ] vaex</li> <li>[ ] xarray</li> </ul>"},{"location":"twin-repos/lunch-python/LICENSE/","title":"LICENSE","text":"<p>Copyright 2021 Scientific Software Center, Heidelberg University</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"twin-repos/lunch-python/lunchtime1/","title":"Lunchtime #1: requests library (Oct. 21)","text":"<p>The requests library provides an elegant and simple way to send HTTP requests. Connect to the server of your choice, and download websites, stream data or upload content. Requests is one of the most downloaded python packages with about 14 Million downloads per week, and half a million of repositories that depend on requests.</p>"},{"location":"twin-repos/lunch-python/lunchtime10/","title":"Lunchtime 10: PyTorch (October 28th)","text":"<p>PyTorch is a free and open-source machine learning framework that was originally developed by engineers at Facebook, but is now part of the Linux foundation. The two main features of PyTorch are its tensor computations framework (similar to numpy) with great support for GPU acceleration and their support for neural networks via autograd.</p>"},{"location":"twin-repos/lunch-python/lunchtime14/","title":"Lunchtime #14: FastAPI / SQLModel","text":"<p>FastAPI is a web framework that combines https://www.starlette.io/ (ASGI framework) with pydantic (data validation). SQLModel combines SQLAlchemy (database ORM) with pydantic](https://docs.pydantic.dev/latest/). Together they allow you to write expressive web backends with data validation and type hints.</p>"},{"location":"twin-repos/lunch-python/lunchtime2/","title":"Lunchtime #2: SymPy (Nov. 26)","text":"<p>SymPy is a Python library for symbolic mathematics. It can parse mathematical expressions, substitute, differentiate, integrate and evaluate them, as well as solve algebraic and differential equations. It is also itself written entirely in Python, with a focus keeping the code comprehensible and easily extensible. There is also a related project SymEngine, which is written in C++ with a focus on speed, which offers a much faster implementation of a subset of SymPy's functionality.</p>"},{"location":"twin-repos/lunch-python/lunchtime3/","title":"Lunchtime #3: Click (Jan. 22)","text":"<p>Click is a Python package for creating beautiful command line interfaces in a composable way with as little code as necessary.</p>"},{"location":"twin-repos/lunch-python/lunchtime4/","title":"Lunchtime #4: pytest (Feb. 25)","text":"<p>pytest is a widely used Python test framework, which makes it easy to write small and readable tests, and also offers more advanced features such as fixtures and mocks. There is also a large ecosystem of plugins providing additional functionality.</p>"},{"location":"twin-repos/lunch-python/lunchtime5/","title":"Lunchtime 5: pillow (March 25th)","text":"<p>Pillow is the friendly fork of the Python Imaging Library (PIL). It provides provides extensive file format support, an efficient internal representation, and fairly powerful image processing capabilities.</p>"},{"location":"twin-repos/lunch-python/lunchtime6/","title":"Lunchtime #6: numba","text":"<p>numba is a just-in-time (JIT) compiler for Python. With a few simple annotations, array-oriented and math-heavy Python code can be just-in-time optimized to performance similar as C, C++ and Fortran, without having to switch languages or Python interpreters.</p>"},{"location":"twin-repos/lunch-python/lunchtime8/","title":"Lunchtime 8: ipywidgets (July 29th)","text":"<p>ipywidgets is a widget library that provides interactive UI controls (widgets) to Jupyter notebooks. They allow the generation of frontend controls in pure Python for both demonstrator notebooks and Python libraries.</p>"},{"location":"twin-repos/lunch-python/lunchtime9/","title":"Lunchtime #9: mypy","text":"<p>mypy is a static type checker for Python. By adding type annotations to your code mypy can find a variety of bugs. These type annotations also act as machine-checked documentation of your code, and your IDE can make use of them to improve its code completion. They don't affect how your program runs, as the Python interpreter ignores these type annotations at run-time</p>"},{"location":"twin-repos/python-project-template/","title":"Index","text":"<p>Content of the source code documentation </p> <ol> <li>Name and short description of the software, authors, date of initial development</li> <li>Main features</li> <li>Main requirements</li> <li>Further information:<ol> <li>Input examples and explanations, step-by-step tutorial</li> <li>More detailed description of scientific approach and input variables reference</li> <li>Validity range of the parameters</li> <li>License, bug tracker, references, citations</li> <li>Source code description - functions and classes, modules, variables</li> </ol> </li> </ol>"},{"location":"twin-repos/python-project-template/#python-project-template","title":"python-project-template","text":"<p>This is a template for your software project. The example code calculates the side length of a square or a pentagon, that contains the same area as a circle of given radius r.</p> <p>Scientific Software Center, Heidelberg University, 12/2020</p> <p>The code can compute side lengths of two geometric objects - of a square and a pentagon. You have to select either one, output of both objects is currently not implemented. For usage see input. The methods are described in method. Details on the input parameters are given in parameters. A detailed source code description is given through the sphinx documentation (here will be the link to the doc).</p> <p>The program requires a working python environment with <code>numpy</code> installed.  The documentation requires <code>sphinx</code> to be installed on your system.</p> <p>For installation, run <code>source setup.sh</code></p> <p>This will pip-install the requirements of the template (<code>numpy</code>, <code>sphinx</code> and extensions, and <code>pytest</code>) on your system.</p> <p>If you want to run the test module manually, execute <code>python -m pytest</code> in the <code>src/</code> directory.</p> <p>The repository contains a configuration file for <code>pre-commit</code> hooks. To activate the hooks, run <code>pre-commit install</code>. This will then provide a check whenever you commit changes to the repository: In particular, the linter <code>flake8</code> will check all Python source files and iPython notebooks, and <code>black</code> will reformat all Python source files and iPython notebooks to adhere to the PEP rules. If the files are reformatted, or <code>flake8</code> still detects further issues, the commit will fail as the files are changed. You need to stage these changed files again using the <code>git add</code> command and the commit to the repository again. Committing these the second time should then work and you can then push to the remote. </p>"},{"location":"twin-repos/python-project-template/#github-actions","title":"github actions","text":"<p>This repository contains a github action in <code>./github/workflows/</code>. This will run linting, unit tests and update the documentation upon push to the master branch and upon pull request. The action can also be run manually in the \"Actions\" tab on the github website.</p>"},{"location":"twin-repos/python-project-template/#linting","title":"Linting","text":"<p>The linter (in this case, <code>flake8</code> will point out potential bugs, errors, styling issues, and suspicious code.</p>"},{"location":"twin-repos/python-project-template/#testing","title":"Testing","text":"<p>You should always test your code against a reference. In this template, we use <code>pytest</code> which is a popular option that is very versatile.</p> <p>So far, only unit tests are included in the code template (that is, tests of a specific component of the software), but as you develop your software, you should also add <code>integration tests</code> that check the overall behaviour of your code.</p> <p>In the github action, the tests are performed under ubuntu, windows and mac operating systems to ensure that the code runs in different environments. Also, two different python versions are tested right now, 3.8 and 3.9.</p>"},{"location":"twin-repos/python-project-template/#source-code-documentation-functions-modules-classes","title":"Source Code Documentation: Functions, modules, classes, ...","text":"<p>The documentation should be updated as you update your code. Include appropriate method descriptions in your code and <code>sphinx</code> will update the documentation html for your functions, classes, etc. The documentation is build using <code>make html</code> in the <code>doc</code> folder. On your local machine, you can navigate to <code>doc/build/index.html</code> and check the styling. If your code is in a public repository, you can push your sphinx documentation to Read the docs.</p>"},{"location":"twin-repos/python-project-template/doc/further/","title":"Further","text":"<p>Here goes a description of the licensing, bug tracking, references and citations for your program.</p>"},{"location":"twin-repos/python-project-template/doc/input/","title":"Input","text":"<p>Here goes a description of the input required for your program.</p>"},{"location":"twin-repos/python-project-template/doc/input/#program-input","title":"Program input","text":"<p>The program options can be displayed by running <code>python ./src/main.py -h</code> </p> <p>This will return the possible input options and type of parameters. </p> <p>For example, to calculate the side length of a square with the same area as a circle of radius r, you would run <code>python ./src/main.py -o square -r 4</code> </p> <p>For the side length of a pentagon, you would provide <code>python ./src/main.py -o pentagon -r 4</code> </p> <p>The program will then return the side length of the selected object.</p>"},{"location":"twin-repos/python-project-template/doc/method/","title":"Method","text":"<p>Here goes a description of the scientific method and explanation of the keywords in terms of a method reference.</p> <p>This is to use latex-style equations in github markdown - unfortunatly it is not as nifty as i.e. jupyter:</p> <p></p>"},{"location":"twin-repos/python-project-template/doc/method/#methods","title":"Methods","text":"<p>The program uses three functions to calculate the desired values.</p>"},{"location":"twin-repos/python-project-template/doc/method/#the-area-of-a-circle","title":"The area of a circle","text":"<p>The area is calculated using  </p>"},{"location":"twin-repos/python-project-template/doc/method/#the-side-length-of-a-square","title":"The side length of a square","text":"<p>The side length of a square with given area is calculated using  </p>"},{"location":"twin-repos/python-project-template/doc/method/#the-side-length-of-a-pentagon","title":"The side length of a pentagon","text":"<p>The side length of a pentagon with given area is calculated using  </p>"},{"location":"twin-repos/python-project-template/doc/parameters/","title":"Parameters","text":"<p>Here goes a description of the parameters and their validity range.</p> <ul> <li>The input parameter <code>r</code> - the radius of the circle - can only be a real number larger or equal to zero.</li> <li>The input string is restricted to <code>square</code> or <code>pentagon</code>, no other methods have been implemented so far.</li> </ul>"},{"location":"twin-repos/python-project-template/doc/sphinxdoc/","title":"Sphinxdoc","text":"<ul> <li>this can be generated using tools like sphinx</li> </ul>"},{"location":"twin-repos/python-project-template/doc/source/license_link/","title":"License information","text":"<p><code>{include} ../../LICENSE</code></p>"},{"location":"twin-repos/python-project-template/doc/source/readme_link/","title":"Readme","text":"<p><code>{include} ../../README.md</code></p>"}]}